{
	const setUp = () => {
		let observer;
		const CLASSNAME = "aem-lazy-background";
	
		const processElement = element => {
			if (element.dataset.backgroundImage) {
				element.style.backgroundImage = element.dataset.backgroundImage;
				delete element.dataset.backgroundImage;
				element.classList.remove(CLASSNAME);
			}
			observer.unobserve(element);
		}
		
		observer = new IntersectionObserver(entries => {
			for (const entry of entries) {
				if (entry.isIntersecting) {
					processElement(entry.target);
				}
			}
		}, {rootMargin: "100px"});
		for (const element of document.getElementsByClassName(CLASSNAME)) {
			observer.observe(element);
		}
	
		// Take care of any lazy-background elements added to the DOM later.
		new MutationObserver(mutations => {
			for (const mutation of mutations) {
				for (const node of mutation.addedNodes) {
					if (node.nodeType == Node.ELEMENT_NODE) {
						if (node.classList.contains(CLASSNAME)) {
							observer.observe(node);
						}
						for (const descendant of node.getElementsByClassName(CLASSNAME)) {
							observer.observe(descendant);
						}
					}
				}
			}
		}).observe(document.body, {childList:true, subtree:true});
	}
	// We are a critical clientlib, at the same priority as dom-utils, so it may not have loaded yet.
	// Use our own DOM ready check instead of NI.AEM.DOMReady.
	if (document.readyState !== 'loading') {
		setUp();
	} else {
		document.addEventListener('DOMContentLoaded', setUp);
	}
}
window.NI = window.NI || {};
NI.AEM = NI.AEM || {};

NI.AEM.DOMReady = new Promise(resolve => {
  if (document.readyState !== 'loading') {
    // This shouldn't normally happen because we're loaded from a non-defer, non-async script tag in the head,
    // but it's safer to check for it anyway rather than risk missing the DOM being ready.
    resolve();
  } else {
    document.addEventListener('DOMContentLoaded', resolve);
  }
});

NI.AEM.delegate = (element, event, selector, handler) => {
  let elements;
  if (typeof(element) === 'string') {
    elements = document.querySelectorAll(element);
  } else if (element instanceof EventTarget) {
    elements = [element];
  } else {
    // we assume this is an array-like object with the elements
    elements = element;
  }
  
  const listener = function(e) {
    const candidate = e.target.closest(selector);
    if (this.contains(candidate)) { // contains will return false if candidate is null, so there is no need for an explicit null check
      handler.call(candidate, e);
    }
  }
  
  for (const e of elements) {
    e.addEventListener(event, listener);
  }
};

// Build a dummy NIAnalytics object to serve as a fallback if
// the real analytics library fails to load. (This can be caused by
// an ad blocker, for example.) If the analytics library does load
// properly, it will replace our dummy methods and everything
// will keep working as before.

{
	if (!window.NIAnalytics) {
		window.NIAnalytics = () => {};
	}

	// Analytics defines its global as an empty function, so do the same
	// for maximum compatibility.
	
	const debugAnalytics = localStorage.getItem('aem-debug-analytics');

	const methodsToAdd = ["captureDownload",
		"captureNavigation",
		"captureVirtualPageLoad",
		"captureOutcome",
		"captureAssessmentQuestion",
		"captureRating",
		"captureSearchSubmit",
		"captureSearchFilter",
		"captureResultClick",
		"captureFilter",
		"capturePopularDownload",
		"captureMultimedia",
		"captureMedia"];
	for (const method of methodsToAdd) {
		if (!NIAnalytics[method]) {
			NIAnalytics[method] = () => {};
		}
	}

	if (debugAnalytics) {
		// This is intended for internal use only, mainly for debugging/testing purposes. We are achieveing this by using a feature flag from localStorage.
		window.NIAnalytics = new Proxy(NIAnalytics, {
			get: function(object, propertyName){
				const property =  object[propertyName];
				if (typeof property == "function" && methodsToAdd.indexOf(propertyName) != -1) {
					return (...argumentsArray) => {
						console.log('NIAnalytics.' + propertyName + '(' + argumentsArray.map(JSON.stringify).join(',') + ')');
						property.apply(NIAnalytics, argumentsArray);
					}
				} else {
					return property;
				}
			}
		});
	}


}

$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {
  if ((options.dataType == 'script' || originalOptions.dataType == 'script') &&
     (options.url.includes('/dam/components') || options.url.includes('/dam/viewers') ||
     originalOptions.url.includes('/dam/components') || originalOptions.url.includes('/dam/viewers'))) {

      options.cache = true;
  }
});
!function($) {
	function startSpinner(message, messageArea, disableAreas) {
		// disableAreas may be an array of selectors or an array of DOM elements.
		// To make sure we handle the former case properly, add the elements one at a time
		// instead of passing them directly to $().
		var $disableAreas = $();
		for (var i = 0; i < disableAreas.length; i++) {
			$disableAreas = $disableAreas.add(disableAreas[i]);
		}
		$disableAreas.addClass('ni-reset-area');
		var $resetMessageDiv = $('<div class="ni-disable-square col-xs-12"><div class="ni-resetting-container"><div class="ni-resetting-spinner"><div class="spinner-icon-medium"></div></div><div class="ni-resetting-text"></div></div></div>');
		var $resetText = $resetMessageDiv.find('.ni-resetting-text'); 
		$resetText.text(message);
		var $messageArea = $(messageArea);
		$messageArea.before($resetMessageDiv);
		var mediumSpinner = new Spinner({lines: 10, length: 5, width: 3, radius:7, speed: 1.2}).spin();
		$resetMessageDiv.find('.spinner-icon-medium').empty().append(mediumSpinner.el);
		
		var disableSquareHeight = $messageArea.outerHeight(true);
		var disableSquareWidth = $messageArea.outerWidth(true);
		$resetMessageDiv.css({height: disableSquareHeight + 'px', width: disableSquareWidth + 'px'});
		
		var resettingTextMargin = disableSquareHeight/2 - $resetText.outerHeight();
		$resetText.css('margin-top', resettingTextMargin + 'px');
		
		return {
			stop: function() {
				mediumSpinner.stop();
				$resetMessageDiv.remove();
				$disableAreas.removeClass('ni-reset-area');
			}
		};
	}
	
	$.extend(true, window, {NI: {AEM: {ToggleSpinner: {startSpinner: startSpinner}}}});
}(window.jQuery);
$(document).ready( function () {

    // Unexpected things happen if we pass undefined to $.data(), so we need an explicit size to fall back to. "lg" is the safest, resulting in the highest resolution images.
    var imageSize = NI.utils.browserSize() || "lg";
    if (imageSize === "xs") {
        imageSize = "sm";
    }
    

    function updateImageSource(){
        var source = $(this).data(imageSize);
        $("img", this).attr("src", source);

        return true;
    }
    
    function updateBGFullImageSource(){
        var background = $(this).data(imageSize);
        $(".section-media-carousel-background", this).attr("style", "background: url(" + background + ") no-repeat center;");

        return true;
   }

    function updateSectionMedia() {
        $.each($("span.section-media"), updateImageSource);
        $.each($("span.section-media"), updateBGFullImageSource);
    }
    
    $(document).on('ni-update-section-media', updateSectionMedia);
    updateSectionMedia();
    
});

// Have a cleaner way to submit labeled onclick events to Analytics that
// doesn't require allowing onclick attributes in authored HTML sources.
// We use a class to indicate tracked links and a data attribute to store
// the data we need to send.

// Ideally this functionality should be available on the whole of ni.com,
// but we can't implement it like that right now. If/when this becomes
// global functionality, the class should be renamed from "aem-tracked-link"
// to something like "analytics-tracked-link" (whatever the Analytics team prefers).
NI.AEM.DOMReady.then(() => {
	NI.AEM.delegate(document.querySelector(".ni-aem-body"), "click", "a.aem-tracked-link", function() {
		const data = this.dataset;
		const eventLabel = data.analyticsEventLabel;
		const eventName = data.analyticsEventName;
		let hasData = false;
		const analyticsParams = {};
		if (eventLabel !== undefined) {
			analyticsParams.eventLabel = eventLabel;
			hasData = true;
		}
		if (eventName !== undefined) {
			analyticsParams.eventName = eventName;
			hasData = true;
		}
		if (hasData) {
			NIAnalytics.captureNavigation(analyticsParams);
		}
	});
});

$(document).ready(function () {

    $(document).on('click', '.search-footer .pagination button', function () {
		var form = $(this).closest("form");
		form.find('[name="pageNumber"]').val($(this).data("number")); 
        var callbackUrl = form.data('callback-url');

        $.get(callbackUrl, form.serialize(), function (data) {
            var $data = $(data);
			var resultTable = $('.result-table-container');
            $data.replaceAll(resultTable);
            $data.trigger("ni-search-results-updated");
            $('html, body').animate({
            	scrollTop: $(".result-table-container").offset().top
        	}, 1000);
        });
    });        

    $(document).on('change', '.search-header select.ni-custom-select', function () {
        var form = $(this).closest("form");
        var callbackUrl = form.data('callback-url');

        $.get(callbackUrl, form.serialize(), function(data) {
            var $data = $(data);
			var resultTable = $('.result-table-container');
            $data.replaceAll(resultTable);
            $data.trigger("ni-search-results-updated");
        }, 'html');
    });

    function handleSelectPlacementOnMobile(){
        if ($('.result-table-container').length > 0 && window.innerWidth < 992){
			var $pageSizeContainer = $('.search-header .page-size');
            var $sortCriteriaContainer = $('.search-header .sort-by');
            $pageSizeContainer.removeAttr('style');
            $sortCriteriaContainer.removeAttr('style');
			var pageSizeContainerOffset = $pageSizeContainer.offset();
            var sortCriteriaContainerOffset = $sortCriteriaContainer.offset();

            if (pageSizeContainerOffset.left > sortCriteriaContainerOffset.left){
                $sortCriteriaContainer.offset({top: sortCriteriaContainerOffset.top, left: pageSizeContainerOffset.left});
            } else {
                $pageSizeContainer.offset({top: pageSizeContainerOffset.top, left: sortCriteriaContainerOffset.left});
            }

            sortCriteriaContainerOffset = $sortCriteriaContainer.offset();
            var $sortDirectionContainer = $('.search-header .direction');
			$sortDirectionContainer.removeAttr('style');
            var sortDirectionContainerOffset = $sortDirectionContainer.offset();

            var $resultTable = $('.search-content');
            $resultTable.css('margin-top', '0');

            if (sortDirectionContainerOffset.top > sortCriteriaContainerOffset.top){
                $sortDirectionContainer.offset({top: sortDirectionContainerOffset.top + 12, left: sortCriteriaContainerOffset.left});
				$resultTable.css('margin-top', '12px');
            }
        }
    }


    $(document).on('ni-search-results-updated generic-result-refresh', handleSelectPlacementOnMobile);

    $( window ).resize(handleSelectPlacementOnMobile);
});
{
    const printFunction = function() {
        NIAnalytics.setAndTrack("eVar1", NIAnalytics.getDataElement("PAGE_NAME"));
        NIAnalytics.setAndTrack(["eVar56", "prop50"], NIAnalytics.getDataElement("DETAILED_PAGENAME"));
        NIAnalytics.sendBeacon({"asPageView": false, "linkType": "e", "linkName": "print"});
        window.print();
    }
    
    const mailFunction = function() {
        NIAnalytics.setAndTrack("eVar1", NIAnalytics.getDataElement("PAGE_NAME"));
        NIAnalytics.setAndTrack(["eVar56", "prop50"], NIAnalytics.getDataElement("DETAILED_PAGENAME"));
        NIAnalytics.sendBeacon({"asPageView": false, "linkType": "e", "linkName": "email share"});
        location.href='mailto:?subject='+document.title+'&amp;body='+window.location.href;
    }
    
    const initMetadataSubtitleAnalytics = function() {
    
        var emailElement = $("#metadata-subtitle-mailto")[0];
        var printElement = $("#metadata-subtitle-print")[0];
    
        if (!emailElement || !printElement) {
            return;
        }
    
        printElement.onclick = printFunction;
        emailElement.onclick = mailFunction;
    };
    
    $(document).ready(initMetadataSubtitleAnalytics);
}


{
    const replaceAuthorInfoElements = () => {
		const col2text = document.querySelector(".get-results-confirmation .col2-text");
		const authorinfo = document.querySelector(".get-results-confirmation .ni__perspective-detail-header--writer");
        if(col2text && authorinfo){
			authorinfo.after(col2text);
    	}
    }

    const setResultsFormDisplay = () => {
		const resultsForm = document.querySelector(".get-results-form-container");
		const resultsConfirmation = document.querySelector(".get-results-confirmation");
		resultsForm.style.display = "none";
        resultsConfirmation.style.display = "flex";
    }

    const showErrorPopup = () => {

		const overlay = document.querySelector(".get-results-form-confirm-overlay-hidden");
		overlay.classList.remove("get-results-form-confirm-overlay-hidden");
		overlay.classList.add("get-results-form-confirm-overlay-shown");
		document.querySelector('html').style.overflow = 'hidden';
    
		const closeButton = document.querySelector(".get-results-form-confirm-overlay__dialog .get-results-form-overlay__close-button");
		closeButton.addEventListener("click", function(){
			overlay.classList.add("get-results-form-confirm-overlay-hidden");
			overlay.classList.remove("get-results-form-confirm-overlay-shown");
			document.querySelector('html').style.overflow = "auto";
		});

    }

    const handleSubmitParameter = (submitParam) => {

        if(submitParam == "error"){
			showErrorPopup();
        }else if(submitParam == "success"){
			setResultsFormDisplay();
        }

    }

    const submitForm = () => {

        const invalidFields = document.querySelectorAll(".get-results-form form .get-results-form-contact-item :invalid");
        const invalidCheckbox = document.querySelector(".get-results-form form .get-results-form-footer :invalid");

        if(invalidFields.length == 0 && !invalidCheckbox){

        	const form = document.querySelector(".get-results-form form");

			const marketingCheckbox = document.getElementById("marketing");

        	if(marketingCheckbox.checked){
        	    document.getElementById('marketingHidden').disabled = true;
        	}

        	form.submit();

			const emailValue = document.querySelector(".get-results-form .get-results-form-item #email").value;

			NIAnalytics.captureAssessment({"eventName": "complete", "email": emailValue, "optIn": marketingCheckbox.checked});

        }else{
			invalidFields.forEach(function(currentValue) {
				let formItem = currentValue.closest(".get-results-form-item");
                if(!formItem){
					formItem = currentValue.closest(".get-results-form-footer");
                }

                if(!formItem.querySelector("p")){
                    const newP = document.createElement("p");
                	const newContent = document.createTextNode("Incomplete or invalid entry. Please try again.");
                	newP.appendChild(newContent);
                    currentValue.after(newP);
                	formItem.classList.add("invalid");
                }

                currentValue.addEventListener("click",function(){
					formItem.classList.remove('invalid');
                    let errorP = formItem.querySelector("p");
                    if(errorP){
						errorP.remove();
                    }

                });
            });
        }

	}

    NI.AEM.DOMReady.then(() => {

        const button = document.getElementById("getResultsFormGetReportButton");

        if(button){
			button.addEventListener("click", submitForm);
        }

		replaceAuthorInfoElements();

		const url = new URL(window.location.href);
		const submitParam = url.searchParams.get("submit");

        handleSubmitParameter(submitParam);

    });

}
{
    const replaceAuthorInfoElements = () => {
		const col2text = document.querySelector(".gating-form-confirmation .col2-text");
		const authorinfo = document.querySelector(".gating-form-confirmation .ni__perspective-detail-header--writer");
        if(col2text && authorinfo){
			authorinfo.after(col2text);
    	}
    }

    const showComponent = () => {
        const url = new URL(window.location.href);
		const submitParam = url.searchParams.get("submit");
        const gatingFormConfirmation = document.querySelector(".gating-form-confirmation");
        if(submitParam == "success"){
			gatingFormConfirmation.style.display="block";
			window.addEventListener("load", () => {
				gatingFormConfirmation.scrollIntoView();
            });
    	}
    }

    const setComponentWidth = () => {
		const component = document.querySelector(".gating-form-confirmation");
		if(component){
			const componentWidth = component.offsetWidth;

			if (componentWidth < 799) {
				component.setAttribute("data-breakpoint", "gating-form-confirmation-small");
			}else{
				component.removeAttribute("data-breakpoint");
			}			
		}


	}

    NI.AEM.DOMReady.then(() => {

		replaceAuthorInfoElements();

		showComponent();

		window.addEventListener("resize", setComponentWidth);

		setComponentWidth();

    });

}
{
	const setComponentWidth = () => {
		const component = document.querySelector(".gating-form");
		const componentWidth = component.offsetWidth;

		if (componentWidth < 375) {
			component.setAttribute("data-breakpoint", "gating-form-small");
		} else if (componentWidth < 720) {
			component.setAttribute("data-breakpoint", "gating-form-medium");
		} else if (componentWidth < 1024) {
			component.setAttribute("data-breakpoint", "gating-form-desktop");
		} else if (componentWidth < 1200) {
			component.setAttribute("data-breakpoint", "gating-form-large");
		} else {
			component.setAttribute("data-breakpoint", "gating-form-xlarge");
		}
	}

	const showErrorPopup = () => {
		const overlay = document.querySelector(".gating-form-confirm-overlay-hidden");
		overlay.classList.remove("gating-form-confirm-overlay-hidden");
		overlay.classList.add("gating-form-confirm-overlay-shown");

		const closeButton = document.querySelector(".gating-form-confirm-overlay__dialog .gating-form-overlay__close-button");
		closeButton.addEventListener("click", function () {
			overlay.classList.add("gating-form-confirm-overlay-hidden");
			overlay.classList.remove("gating-form-confirm-overlay-shown");
		});
	}

	const handleSubmitParameter = (submitParam) => {
		if (submitParam == "error") {
			showErrorPopup();
		} else if (submitParam == "success") {
			document.querySelector(".gating-form").style.display = "none";
			return false;
		}

		return true;
	}

	const submitForm = (event) => {
		const inputFields = document.querySelectorAll(".gating-form form input");
		for (const inputField of inputFields) {
			setSvgForFieldValidity(inputField);
		}

		const invalidFields = document.querySelectorAll(".gating-form form .gating-form-invalid, .gating-form form :invalid");

		if (invalidFields.length == 0) {
			const form = document.querySelector(".gating-form form");
			const marketingCheckbox = document.getElementById("gating-form-marketing");
			const emailValue = document.querySelector(".gating-form .gating-form-item #email").value;

			if (marketingCheckbox.checked) {
				document.getElementById('gatingFormMarketingHidden').disabled = true;
			}

			form.submit();
			NIAnalytics.capturePardotForm({"eventName": "complete", "formName": "demandresponseform", "email": emailValue, "optIn": marketingCheckbox.checked});
		} else {
			event.preventDefault();
			document.querySelector(".gating-form").scrollIntoView();
			for (const invalidField of invalidFields) {
				createErrorMessage(invalidField);
			}
		}
	}

	const createErrorMessage = (field) => {
		if (!field.parentElement.querySelector(".gating-form-error-message")) {
			const newP = document.createElement("p");
			const newContent = document.createTextNode("Incomplete or invalid entry. Please try again.");
			newP.classList.add("gating-form-error-message")
			newP.appendChild(newContent);
			field.after(newP);
			field.parentElement.classList.add("gating-form-invalid");

			for (const eventName of ['click', 'change']) {
				field.addEventListener(eventName, () => {
					let errorMessage = field.parentElement.querySelector(".gating-form-error-message");
					if (errorMessage) {
						errorMessage.remove();
					}
				});
			}
		}
	}

	const setSvgForFieldValidity = (field) => {
		if (field.value != "") {
			if (field.checkValidity() && picklistValidation(field) && checkEmailValidity(field)) {
				field.parentElement.classList.add("gating-form-valid");
				let errorMessage = field.parentElement.querySelector(".gating-form-error-message");
				if (errorMessage) {
					errorMessage.remove();
				}
			} else {
				createErrorMessage(field);
			}
		}
	}

	const picklistValidation = (field) => {
		if (field.classList.contains("gating-form-picklist")) {
			return isValidPicklistValue(field.parentElement.querySelector(".gating-form-datalist"), field.value);
		}
		
		return true;
	}

	const checkEmailValidity = (field) => {
		if (field.id == "email") {
			let domainValue = field.value.split('@')[1];
			if (domainValue.includes('.')) {
				return true;
			}
			return false;
		}

		return true;
	}

	const isValidPicklistValue = (datalist, value) => {
		for (option of datalist.options) {
			if (option.text == value) {
				return true;
			}
		}
		
		return false;
	}

	const resetField = (field) => {
		field.parentElement.classList.remove("gating-form-valid");
		field.parentElement.classList.remove("gating-form-invalid");
		let errorMessage = field.parentElement.querySelector(".gating-form-error-message");
		if (errorMessage) {
			errorMessage.remove();
		}
	}

	NI.AEM.DOMReady.then(() => {
		const componentIsPresentOnPage = document.querySelector(".gating-form");
		
		if (componentIsPresentOnPage) {
			const url = new URL(window.location.href);
			const submitParam = url.searchParams.get("submit");

			if (handleSubmitParameter(submitParam)) {
				const embeddedForm = document.querySelector(".gating-form .gating-form-container[data-embedded]");
				if (embeddedForm) {
					embeddedForm.addEventListener("click", () => {
						NIAnalytics.capturePardotForm({ "eventName": "start", "formName": "demandresponseform" });
					}, { once: true });
				} else {
					window.addEventListener("load", () => {
						NIAnalytics.capturePardotForm({ "eventName": "start", "formName": "demandresponseform" });
					});
				}

				let dropdownInputs = document.querySelectorAll(".gating-form .gating-form-picklist");
				for (const dropdownInput of dropdownInputs) {
					setupCustomDropdown(dropdownInput, dropdownInput.nextElementSibling);

					for (const eventName of ['click', 'change']) {
						dropdownInput.addEventListener(eventName, () => {
							resetField(dropdownInput);
						});
					}
				}

				let inputs = document.querySelectorAll(".gating-form input:not(.gating-form-picklist)");
				for (const inputField of inputs) {
					inputField.addEventListener("blur", () => {
						setSvgForFieldValidity(inputField);
					});

					for (const eventName of ['click', 'change']) {
						inputField.addEventListener(eventName, () => {
							resetField(inputField);
						});
					}
				}

				window.addEventListener("resize", setComponentWidth);
				setComponentWidth();

				let submitButton = document.querySelector(".gating-form .gating-form-footer .footer-button a");
				if (submitButton) {
					submitButton.addEventListener("click", submitForm);
				}
			}
		}
	});

	function setupCustomDropdown(dropdownInput, datalist) {
		dropdownInput.addEventListener("click", () => {
			if (!dropdownInput.classList.toggle("gating-form-open-dropdown")) {
				dropdownInput.blur();
				setSvgForFieldValidity(dropdownInput);
			}
		});

		for (const eventName of ['keyup', 'keydown']) {
			dropdownInput.addEventListener(eventName, (event) => {
				if (event.keyCode == 9){
					dropdownInput.classList.toggle("gating-form-open-dropdown");
				}
			});
		}

		datalist.addEventListener("click", (e) => {
			if (e.target.tagName === "OPTION") {
				dropdownInput.value = e.target.text;
				dropdownInput.classList.remove("gating-form-open-dropdown");
				setSvgForFieldValidity(dropdownInput);
			}
		});

		window.addEventListener("click", (e) => {
			if (!dropdownInput.contains(e.target) && !datalist.contains(e.target)) {
				dropdownInput.classList.remove("gating-form-open-dropdown");
				setSvgForFieldValidity(dropdownInput);
			}
		});

		dropdownInput.addEventListener("input", () => {
			let text = dropdownInput.value.toUpperCase();
			for (let option of datalist.options) {
				if (option.text.toUpperCase().indexOf(text) > -1) {
					option.style.display = "block";
				} else {
					option.style.display = "none";
				}
			};
		});
	}
}
!function($) {
	
	// Return the ID of the tab that should be selected based on the anchor in the URL.
	// The anchor is not guaranteed to match the ID of any tab, so callers should be
	// prepared to handle "invalid" results. Returns the empty string if the default
	// tab behavior should be followed.
	function getTabIdFromAnchor() {
	    var hash = window.location.hash;
	    var tabId = hash.match(/^#/) ? hash.slice(1).split("?")[0] : "";
	    return tabId;
	}
	
	// This piece of functionality needs to execute before the Analytics page bottom call,
	// i.e. it *can't* wait for DOMReady. Instead, we need to expose a function that can be called
	// from an inline script tag and decides which tab will get activated without having access
	// to the rendered component in the DOM.
	
	function reportActiveTabToAnalytics(tabInfo) {
		// tabInfo will be a list of objects with two properties: domId for the ID of the tab in the DOM,
		// and analyticsId for the ID to be reported to Analytics. We need to send the ID of the first tab
		// to Analytics, unless the URL has an anchor saying otherwise. This logic _must_ match the deeplink
		// logic set up for window.onload below!
		if (tabInfo.length === 0) {
			return;
		}
		var selectedTab = tabInfo[0].analyticsId;
		
	    var targetParam = getTabIdFromAnchor();
	    
	    for (var i = 0; i < tabInfo.length; i++) {
	    	if (tabInfo[i].domId === targetParam) {
	    		selectedTab = tabInfo[i].analyticsId;
	    		break;
	    	}
	    }
	    
	    $.extend(true, window, {digitalData: {page: {pageInfo: {pageTabContent: selectedTab}}}});
	}
	
	// Export our function in a namespace that hopefully won't collide with anything else.
	$.extend(true, window, {NI: {AEM: {TabComponent: {reportActiveTabToAnalytics: reportActiveTabToAnalytics}}}});

	/**
	 * Tabs Component: On load, initiate the tab to accordion function and check the deeplink.
	 */
	$(document).ready(function() {
	    // This init the accordion for mobile
	    // Loops over all instances of the component
	    $('.renderedTabs').each(function(){
	        $(this).tabCollapse();
	    });

		var listItem = $('#renderedTabs > li');
        var numberOfTabs = $(listItem).attr('data-ni-numberOfTabs');

		$('#renderedTabs > li').css("maxWidth", Math.floor(100 / numberOfTabs) + "%");

	    // deeplink logic
	    var targetParam = getTabIdFromAnchor();
	    // Don't append the anchor to a CSS selector - that can cause errors in edge cases
	    // where the anchor has characters that have meaning in CSS. Use getElementById
	    // instead, it's well-behaved no matter what strange string it's fed.
	    var targetDomElement = targetParam.length > 0 ? document.getElementById(targetParam) : null;
	    var $target = $(targetDomElement);  // jQuery is documented to return an empty set if given null, so no need to special-case missing elements here

	    if($target.closest('.tabctrl-component').length > 0){
            $('#renderedTabs > li').first().removeClass('in active');
            $('#renderedTabContent > div').first().removeClass('in active');
            $target.addClass('in active');
            $('#'+targetParam+"-header").addClass('in active');
            var cPanelHeading = $target.prev();
            cPanelHeading.find( ".panel-title a" ).removeClass('collapsed');
	    }
	});
}(window.jQuery);

/**
 * Logic for Tabs Component and changing to accordion.
 */
!function ($) {

    "use strict";

    // TABCOLLAPSE CLASS DEFINITION
    // ======================

    var TabCollapse = function (el, options) {
        this.options   = options;
        this.$tabs  = $(el);

        this._accordionVisible = false; //content is attached to tabs at first
        this._initAccordion();
        this._checkStateOnResize();


        // checkState() has gone to setTimeout for making it possible to attach listeners to
        // shown-accordion.bs.tabcollapse event on page load.
        // See https://github.com/flatlogic/bootstrap-tabcollapse/issues/23
        var that = this;
        setTimeout(function() {
          that.checkState();
        }, 0);
    };

    TabCollapse.DEFAULTS = {
        accordionClass: 'visible-xs',
        tabsClass: 'hidden-xs',
        accordionTemplate: function(heading, groupId, parentId, active) {
            return  '<div class="panel panel-default">' +
                    '   <div class="panel-heading">' +
                    '      <h4 class="panel-title">' +
                    '      </h4>' +
                    '   </div>' +
                    '   <div id="' + groupId + '" class="panel-collapse collapse ' + (active ? 'in' : '') + '">' +
                    '       <div class="panel-body js-tabcollapse-panel-body">' +
                    '       </div>' +
                    '   </div>' +
                    '</div>'

        }
    };

    TabCollapse.prototype.checkState = function(){
        if (this.$tabs.is(':visible') && this._accordionVisible){
            this.showTabs();
            this._accordionVisible = false;
        } else if (this.$accordion.is(':visible') && !this._accordionVisible){
            this.showAccordion();
            this._accordionVisible = true;
        }
    };

    TabCollapse.prototype.showTabs = function(){
        var view = this;
        this.$tabs.trigger($.Event('show-tabs.bs.tabcollapse'));
        //Adding Class for the headers. This class has to be removed on mobile as it interfers with the styles
        $('#headerContainer').addClass("tabctrl-header");

        var $panelHeadings = this.$accordion.find('.js-tabcollapse-panel-heading').detach();

        $panelHeadings.each(function() {
            var $panelHeading = $(this),
            $parentLi = $panelHeading.data('bs.tabcollapse.parentLi');

            var $oldHeading = view._panelHeadingToTabHeading($panelHeading);

            $parentLi.parent().removeClass('active');

            if (!$oldHeading.hasClass('collapsed')) {
                $parentLi.parent().addClass('active');
            } else {
                $oldHeading.removeClass('collapsed');
            }

            $parentLi.append($panelHeading);
        });

        //if no tabs are selected on mobile or default state, activate the first tab
        // TODO: there must be a better way to do this
        var i = 0;
        if (!$('li').hasClass('active')) {
            $panelHeadings.each(function() {
                if(i == 0){
                    var $panelHeading = $(this),
                    $parentLi = $panelHeading.data('bs.tabcollapse.parentLi');
                    $parentLi.parent().addClass('active');
                }
                i++;
            });
        }

        var $panelBodies = this.$accordion.find('.js-tabcollapse-panel-body');
        $panelBodies.each(function(){
            var $panelBody = $(this),
                $tabPane = $panelBody.data('bs.tabcollapse.tabpane');
            $tabPane.append($panelBody.contents().detach());
        });
        this.$accordion.html('');

        if(this.options.updateLinks) {
            var $tabContents = this.getTabContentElement();
            $tabContents.find('[data-toggle-was="tab"], [data-toggle-was="pill"]').each(function() {
                var $el = $(this);
                var href = $el.attr('href').replace(/-collapse$/g, '');
                $el.attr({
                    'data-toggle': $el.attr('data-toggle-was'),
                    'data-toggle-was': '',
                    'data-parent': '',
                    href: href
                });
            });
        }

        this.$tabs.trigger($.Event('shown-tabs.bs.tabcollapse'));
    };

    TabCollapse.prototype.getTabContentElement = function(){
        var $tabContents = $(this.options.tabContentSelector);
        if($tabContents.length === 0) {
            $tabContents = this.$tabs.siblings('.tab-content');
        }
        return $tabContents;
    };

    TabCollapse.prototype.showAccordion = function(){
        this.$tabs.trigger($.Event('show-accordion.bs.tabcollapse'));
        //Removing Class for the headers as it interfers with the styles
        $('#headerContainer').removeClass("tabctrl-header");

        var $headings = this.$tabs.find('li:not(.dropdown) [data-toggle="tab"], li:not(.dropdown) [data-toggle="pill"]'),
            view = this;
        $headings.each(function(){
            var $heading = $(this),
                $parentLi = $heading.parent();
            $heading.data('bs.tabcollapse.parentLi', $parentLi);
            view.$accordion.append(view._createAccordionGroup(view.$accordion.attr('id'), $heading.detach()));
        });

        if(this.options.updateLinks) {
            var parentId = this.$accordion.attr('id');
            var $selector = this.$accordion.find('.js-tabcollapse-panel-body');
            $selector.find('[data-toggle="tab"], [data-toggle="pill"]').each(function() {
                var $el = $(this);
                var href = $el.attr('href') + '-collapse';
                $el.attr({
                    'data-toggle-was': $el.attr('data-toggle'),
                    'data-toggle': 'collapse',
                    'data-parent': '#' + parentId,
                    href: href
                });
            });
        }

        this.$tabs.trigger($.Event('shown-accordion.bs.tabcollapse'));

        //Making sure the active class is applied to the selected tab
        $('#renderedTabs-accordion > .panel').on('show.bs.collapse', function (e) {
            var heading = $(this).find('.panel-heading');
            heading.addClass("tabopen");
        });
        
        $('#renderedTabs-accordion > .panel').on('hidden.bs.collapse', function (e) {
            var heading = $(this).find('.panel-heading');
            heading.removeClass("tabopen");
        })

    };

    TabCollapse.prototype._panelHeadingToTabHeading = function($heading) {
        var href = $heading.attr('href').replace(/-collapse$/g, '');
        $heading.attr({
            'data-toggle': 'tab',
            'href': href,
            'data-parent': ''
        });
        return $heading;
    };

    TabCollapse.prototype._tabHeadingToPanelHeading = function($heading, groupId, parentId, active) {
        $heading.addClass('js-tabcollapse-panel-heading ' + (active ? '' : 'collapsed'));
        $heading.attr({
            'data-toggle': 'collapse',
            'data-parent': '#' + parentId,
            'href': '#' + groupId
        });
        return $heading;
    };

    TabCollapse.prototype._checkStateOnResize = function(){
        var view = this;
        $(window).resize(function(){
            clearTimeout(view._resizeTimeout);
            view._resizeTimeout = setTimeout(function(){
                view.checkState();
            }, 100);
        });
    };


    TabCollapse.prototype._initAccordion = function(){
        var randomString = function() {
            var result = "",
                possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for( var i=0; i < 5; i++ ) {
                result += possible.charAt(Math.floor(Math.random() * possible.length));
            }
            return result;
        };

        var srcId = this.$tabs.attr('id'),
            accordionId = (srcId ? srcId : randomString()) + '-accordion';

        this.$accordion = $('<div class="panel-group ' + this.options.accordionClass + '" id="' + accordionId +'"></div>');
        this.$tabs.after(this.$accordion);
        this.$tabs.addClass(this.options.tabsClass);
        this.getTabContentElement().addClass(this.options.tabsClass);
    };

    TabCollapse.prototype._createAccordionGroup = function(parentId, $heading){
        var tabSelector = $heading.attr('data-target'),
            active = $heading.data('bs.tabcollapse.parentLi').parent().is('.active');

        if (!tabSelector) {
            tabSelector = $heading.attr('href');
            tabSelector = tabSelector && tabSelector.replace(/.*(?=#[^\s]*$)/, ''); //strip for ie7
        }

        var $tabPane = $(tabSelector),
            groupId = $tabPane.attr('id') + '-collapse',
            $panel = $(this.options.accordionTemplate($heading, groupId, parentId, active));
        //check if the tab is active to change its style
        if(active){
            $panel.find('.panel-heading').addClass("tabopen");
        }
        $panel.find('.panel-heading > .panel-title').append(this._tabHeadingToPanelHeading($heading, groupId, parentId, active));
        $panel.find('.panel-body').append($tabPane.contents().detach())
            .data('bs.tabcollapse.tabpane', $tabPane);

        return $panel;
    };



    // TABCOLLAPSE PLUGIN DEFINITION
    // =======================

    $.fn.tabCollapse = function (option) {
        return this.each(function () {
            var $this   = $(this);
            var data    = $this.data('bs.tabcollapse');
            var options = $.extend({}, TabCollapse.DEFAULTS, $this.data(), typeof option === 'object' && option);

            if (!data) $this.data('bs.tabcollapse', new TabCollapse(this, options));
        });
    };

    $.fn.tabCollapse.Constructor = TabCollapse;


}(window.jQuery);

// Allow a declarative approach for opening modal windows instead of a direct
// onclick attribute. This is helpful in rich text use cases where we don't
// want authors to add arbitrary onclick handlers to the markup.

// In order for an <a> tag to open a modal window, it needs to have the
// "aem-modal-opener" class and its href attribute must be a fragment pointing
// to the modal element.
$(function($){
	"use strict";
	$(".ni-aem-body").on("click", "a.aem-modal-opener[href^='#']", function(e) {
		var modalId = $(this).attr("href");
		$(modalId).dialog("open");
		e.preventDefault();
        return false;
	});
});

var TOOLTIP_MODAL_BREAKPOINT = 768;

//hidden elements doesn't have height
var getElementHeight = function (element) {
    var height = element.offsetHeight;
    if (height == 0) {
        element.style.display = "block";
        height = element.offsetHeight;
        element.style.removeProperty('display');
    }
    return height;
}

var POSITIONERS = {
    top: function () {
        return [
            // height of the content + hotspot size + tooltip edge size
            {
                name: 'margin-top',
                value: '-' + (this.offsetHeight + 64 + 12) + 'px'
            },
            {
                name: "margin-left",
                value: "-30px"
            }
        ]
    },
    bottom: function () {
        return [
            // larger tooltip edge size
            {
                name: "margin-top",
                value: "15px"
            },
            // left distance of the edge size
            {
                name: "margin-left",
                value: "-28px"
            }
        ]
    },
    right: function () {
        return [
            // Hotspot size + spacing for the border
            {
                name: "margin-top",
                value: '-' + (64 + 5) + "px"
            },
            {
                name: "margin-left",
                value: "55px"
            }
        ]
    },
    left: function () {
        return [
            // hotspot size + spacing for the border
            {
                name: "margin-top",
                value: '-' + (64 + 5) + "px"
            },
            {
                name: "margin-left",
                value: "-" + (this.offsetWidth + 38) + "px"
            }
        ]
    }
}

document.addEventListener('DOMContentLoaded', function () {

    var hotspots = document.querySelectorAll('.ni-aem-hotspot');

    for (var j = 0; j < hotspots.length; j++) {
        var hotspot = hotspots[j];

        var backgroundImage = hotspot.querySelector('.hotspot-background');

        var spots = Array.prototype.slice.call(hotspot.querySelectorAll('.hotspot-spot'));

        spots.forEach(function (spot) {

            var x = spot.getAttribute('data-position-x');
            var y = spot.getAttribute('data-position-y');

            spot.style.left = 'calc('+ x + '% - 8px)';
            spot.style.top = 'calc('+ y + '% - 8px)';

            var content = spot.querySelector('.hotspot-spot-content');
            content.addEventListener('click', function (event) {
                event.stopPropagation();
            })

            content.querySelector('.hotspot-tooltip-close').addEventListener('click', function (event) {
                event.target.closest('.hotspot-spot').classList.remove('active');
            });

            var shape = spot.querySelector('.hotspot-shape');
            shape.addEventListener('click', function (event) {
                var selectedSpot = event.target.closest('.hotspot-spot');
                if (window.innerWidth > TOOLTIP_MODAL_BREAKPOINT) {
                    backgroundImage.click();
                    selectedSpot.classList.add('active');

                    var positioning = POSITIONERS[content.getAttribute('data-position')].call(content);

                    for (var i in positioning) {
                        positioner = positioning[i];
                        content.style[positioner.name] = positioner.value;
                    }

                    event.stopPropagation();
                } else {
                    var modal = event.target.closest('.ni-aem-hotspot').querySelector('.hotspot-modal-window');

                    var tooltipContent = selectedSpot.querySelector('.hotspot-tooltip-content');

                    modal.querySelector('.modal-body').innerHTML = tooltipContent.innerHTML;
                    $(modal).modal("show");
                }
            });

        });

    }

    if (hotspots.length) {
        window.addEventListener('click', function () {
            var spots = document.querySelectorAll('.hotspot-spot');
            for (var k = 0; k < spots.length; k++) {
                spots[k].classList.remove('active');
            }
        });
    }

});

$(document).ready( function () {

	var $containers = $(".gating-main-container");

    if ($containers.length > 0){

        var myNIUA = NIUA.getNIUA({apikey:"0d6a398d-7ff4-4f12-9086-7045b65bf2ca"});

        myNIUA.ready().then(function(){
			$containers.each(function(index,element){
            	var $element = $(element);
				var token = myNIUA.createNIAuthToken();
                
                var urlData = calculateUrlData($element);
                urlData.pageLocation = window.location.href;
            	var headers = {};
            	if (token != null){
					headers['X-NI-Auth-Token'] = token;
                } 
				sendGatingRequest($element, headers, urlData);               
        	});
        });
    }

    function sendGatingRequest($element, headers, urlData){
		$.ajax({
        	url: $element.data("container-path"),
          	headers: headers,
            data: urlData,
            success: function(data, textStatus, jqXhr){
            	if (jqXhr.getResponseHeader("NI-Gating-Redirect-Url")){
            		window.location.href = jqXhr.getResponseHeader("NI-Gating-Redirect-Url");
            	} else {
            		$element.html(data);
            		$element.trigger("gating-done");
            		$(document).trigger("ni-update-section-media");
            	}
            },
            error: function(){
				$element.hide();
           	}
       });
    }

    function calculateUrlData($element){
    	var urlData = {};
		var $params = $element.find(".gating-params");
		if ($params){
			$params.children().each(function(){
				urlData[$(this).data("name")] = $(this).data("value");
			});
		}
		return urlData;
    }
    
});
$(function(){
    var $window = $(window);
    $window.load(function() {
    	$(".carousel-slider .slider-component").each(function(index,carousel){
			var $carousel = $(carousel);
			var sliderId = '#' + $carousel.data('uuid') + '-slider';
			var carouselId = '#' + $carousel.data('uuid') + '-carousel';
			
			if ($carousel.data('navigation-type') == 'dots') {
				
				$(sliderId).flexslider({
					animation: "slide",
					animationLoop: false,
					slideshow: true,
					slideshowSpeed: 7000,
					pauseOnHover: true,   
					controlsContainer: $carousel.find(".custom-controls-container"),
					customDirectionNav: $carousel.find(".custom-navigation a"),
					start: function(){
						$(document).trigger("ni-carousel-start");
					}
				});
			} else if ($carousel.data('navigation-type') == 'thumbnails') {
				
				$(carouselId).flexslider({
					animation: "slide",
					controlNav: false,
					animationLoop: false,
					slideshow: false,
					itemWidth: 132,
					itemMargin:10,
					asNavFor: sliderId,
					start: function(slider){
						$carousel.find('.flexslider').resize();
						$(document).trigger("ni-carousel-start");
					}
				});

				$(sliderId).flexslider({
					animation: "slide",
					controlNav: false,
					animationLoop: false,
					slideshow: false,
                    controlsContainer: $carousel.find(".custom-controls-container"),
                    customDirectionNav: $carousel.find(".custom-navigation a"),
					sync: carouselId,
                    start: function(){
                    	$(document).trigger("ni-carousel-start");
                    }
				});
			}
		});
    });
});
$(function(){

    function getGridSize($carousel) {
        if (window.innerWidth < 481){
            return 1;
        }else if (window.innerWidth < 900){
            return 3;
        }else{
            return $carousel.data("numberofelements");
        }
    }

    var $window = $(window);
    $window.load(function() {
    	$(".carousel-set .ni-carousel-set").each(function(index,carousel){
    			
    			var $carousel = $(carousel);
            	$carousel.flexslider({
                    animation: "slide",
                    controlNav: false,
                    animationLoop: false,
                    slideshow: false,
                    itemWidth: 120,
                    itemMargin: 79,
                    minItems: getGridSize($carousel), 
                    maxItems: getGridSize($carousel),
                    startAt: 0,
                    start: function(slider){
						if($carousel.data("numberofcomponents") <= $carousel.data("numberofelements")){
                        	$carousel.find(".flex-direction-nav a.flex-next").first().addClass("flex-disabled");
                        }
                    }
                });

                $carousel.css("display","");
                $(".flex-prev").text("");
                $(".flex-next").text("");
                $carousel.find('.slides .carousel-slider-main-img img').first().load(
                    window.onload = function() {
                        if (screen.width < 481) {
                            var arrowHeight = $carousel.find('.flex-direction-nav .flex-next').first().height();
                            var imageHeight = $carousel.find('.slides .carousel-slider-main-img img')[0].clientHeight;
                            var arrowPosition = imageHeight + arrowHeight / 2;
                            $carousel.find('.flex-direction-nav a.flex-prev').first().css('top', arrowPosition + "px");
                            $carousel.find('.flex-direction-nav a.flex-next').first().css('top', arrowPosition + "px");
                        }
                    }
                );
            });

    });
});
$(function($) {
    $('.carousel-reference.slider-component').each(function() {
        var $carousel = $(this);
        var $slider = $carousel.find('.slider.flexslider');
        var $slideContainer = $carousel.find('.carousel.flexslider');
        $slider.removeData('flexslider');
        var randomize = $carousel.attr("data-randomize");
        var startSlide = randomize == "true" ? Math.floor(Math.random() * $slider.children('ul').children('li').length) : 0;
        $slider.flexslider({
            animation: "slide",
            controlNav: false,
            animationLoop: false,
            slideshow: false,
            itemWidth: 100,
            itemMargin: 5,
            maxItems:5,
            asNavFor: '#' + $slideContainer.attr('id'),
            init: function (slider) {
                slider.setProps(startSlide, 0, 0);
            },
            startAt: startSlide
        });

        $slideContainer.flexslider({
            animation: "slide",
            controlNav: false,
            animationLoop: false,
            slideshow: false,
            sync: '#' + $slider.attr('id'),
            startAt: startSlide,
            start: function(){
                $('body').removeClass('loading');
            }
        });

        $slider.css("display","");
        $carousel.find(".flex-prev").text("");
        $carousel.find(".flex-next").text("");
        $(document).trigger({
            type:"ni-carousel-initialized",
            id: $carousel.attr('id')
        });
    });

    function getGridSize($carousel) {
        if (window.innerWidth < 481) {
        	return 1;
        } else if (window.innerWidth < 900) {
        	return 3;
        } else {
        	return $carousel.data('visibleElements');
        }
    }

    $(window).on('load', function() {
        $('.carousel-reference.limited-slider').each(function() {
            var $carousel = $(this);
            var $slider = $carousel.find('.limited-slider.flexslider');
            var gridSize = getGridSize($carousel);
            var visibleElementCount = $carousel.data('visibleElements');
            $slider.flexslider({
                animation: "slide",
                controlNav: false,
                animationLoop: false,
                slideshow: false,
                itemWidth: 120,
                itemMargin: 79,
                minItems: gridSize, 
                maxItems: gridSize,
                startAt: 0,
                start: function(slider){
                    var nextButton = $slider.find('.flex-direction-nav a.flex-next').first();
                    if(!nextButton.hasClass("flex-disabled") && slider.count <= visibleElementCount) {
                        nextButton.addClass("flex-disabled");
                     }
                }
            });
            
            $slider.css("display","");
            $carousel.find(".flex-prev").text("");
            $carousel.find(".flex-next").text("");
            
            $slider.find('.slides .carousel-slider-main-img img').first().on('load', function() {
                if (screen.width < 481) {
                    var arrowHeight = $slider.find('.flex-direction-nav .flex-next').first().height();
                    var imageHeight = $slider.find('.slides .carousel-slider-main-img img')[0].clientHeight;
                    var arrowPosition = imageHeight + arrowHeight / 2;
                    $slider.find('.flex-direction-nav a.flex-prev').first().css('top', arrowPosition + "px");
                    $slider.find('.flex-direction-nav a.flex-next').first().css('top', arrowPosition + "px");
                }
            });
        });
    });

    $(window).resize(function() {
        $('.carousel-reference.limited-slider').each(function() {
            var $slider = $(this).find('.limited-slider.flexslider');
            var flexslider = $slider.data('flexslider');
            if (flexslider) {
                var gridSize = getGridSize($(this));
                flexslider.vars.minItems = gridSize;
                flexslider.vars.maxItems = gridSize;
            }
        });
    });
});
$(function() {
	$(document).on('click','.accordion .panel-heading[data-ni-tab-id]', function() {
		var expanded = this.getAttribute('aria-expanded');
		var data = $(this).data();
		if (!data.niAnalyticsSubmitted && (expanded === true || expanded === 'true') && this.hasAttribute('data-ni-tab-id')) {
			var tabId = this.getAttribute('data-ni-tab-id');	// Don't use $.data() because it converts numeric values to numbers. We want the data to stay a string.
			try {
					if (tabId !== ""){
						NIAnalytics.captureVirtualPageLoad({'pageTabContent': tabId});
					}
				} catch (e) {
					console.log("Failed to send analytics event for category click.", e);
				}
				data.niAnalyticsSubmitted = true;
		}
	});

    // reset "analytics submitted" flag when the accordion is done expanding
    $(document).on('shown.bs.collapse', function () {
        var heading = $(this).find('.collapse.in').prev('.panel-heading[data-ni-tab-id]');
        if(heading[0]) {
        	var data = heading.data();
        	delete data.niAnalyticsSubmitted;
        }
    }); 
    
});

// Have a cleaner way to submit labeled onclick events to Analytics that
// doesn't require allowing onclick attributes in authored HTML sources.
// We use a class to indicate tracked links and a data attribute to store
// the data we need to send.

// Ideally this functionality should be available on the whole of ni.com,
// but we can't implement it like that right now. If/when this becomes
// global functionality, the class should be renamed from "aem-tracked-link"
// to something like "analytics-tracked-link" (whatever the Analytics team prefers).
$(function($){
	"use strict";


    if ($(".ni-dropdown-wrapper").length > 0){
		NI.forms.initializeNIForm();
        NI.forms.validation.init();
    }

});

window.addEventListener('load',function(){
	var navElements = document.querySelectorAll('.nav-menu-container .ni__hardware-nav-menu .ni__hardware-nav-menu--container > ul > li > a');

    if(navElements && navElements.length > 0){
        navElements.forEach(navElement => activateTooltip(navElement));
	}

    function activateTooltip(navElement){
        tooltipText = navElement.querySelector(".hardware-nav-menu-tooltiptext");
        headlineText = navElement.querySelectorAll("span")[0];
        if(headlineText.offsetHeight < headlineText.scrollHeight){
			tooltipText.classList.add("active");
        }
    }
})
$(document).on('click', 'a.ni__carousel-item[data-analytics-navigation]', function() {
  var analyticsData = $(this).data('analyticsNavigation');
  NIAnalytics.captureNavigation(analyticsData);
})
$(document).ready(function(){

    function sendAjaxRequest(triggeredEvent, votedValue){

		var activatedElement = $(triggeredEvent.currentTarget);

        var data = activatedElement.find(".user-rating-data-holder");


        $.ajax({
            url: data.data("host-url"),
            data:{
                "p_answer" : votedValue,
                "p_guid" : data.data("guid"),
                "p_rank" : data.data("rank"),
                "p_rating_type": data.data("type")
            }
        });      
    } 

    $(".rating-div").on('helpful.ni.rating', function(e, docid) {
        sendAjaxRequest(e, "yes");
    });

    $(".rating-div").on('nothelpful.ni.rating', function(e, docid) {
        sendAjaxRequest(e, "no");
    });
});
$(function($){
    var wwidth = $(window).width(); 

    function addStickyClass(element){
        $(element).addClass('sticky');
    }

    if(wwidth <= 991){
        var tableWidth = $('.ni-aem-table').parent('.tableRTE').width() - 170;
        $('.ni-aem-table').attr('style', 'width:'+ tableWidth + 'px;');
    
        $(".ni-aem-table table>tbody>tr>th").first().each(function(){
            addStickyClass($(this));
        });
        $(".ni-aem-table table>tbody>tr>td:first-child").each(function(){
            addStickyClass($(this));
        });

    }
});
$(document).ready(function(){
    $('.ni-sticky-header-table-container').each(function () {
        var resizedBeforeSticky = false;
        
        var stickyContainer = $(this);
        var stickyHeader = $(this).find('.ni-sticky-header-container');
        var header = $(this).find('.ni-sticky-header');
        var body = $(this).find('.ni-sticky-body');
        var stickiedElements;
        var firstNonStickyRow;
        
        function init() {
            header.children().clone().appendTo(stickyHeader);
            stickyHeader.find('cq').remove();
            
            // Merge the header table into the body table in the DOM. This will allow the
            // browser to naturally match the header column widths with the body widths.
            var headerTable = header.find('table');
            var bodyTable = body.find('table');
            firstNonStickyRow = bodyTable.find('tr').eq(0);
            stickiedElements = headerTable.children();
            stickiedElements.prependTo(bodyTable);
            headerTable.remove();
            
            if (location.hash) {
                setTimeout(resizeFixed, 2000);
            } else {
                resizeFixed();
            }
        }

        function resizeFixed() {
            stickyHeader.css('left', body.offset().left);
            stickyHeader.css('width', body.css('width'));
            // Copy the calculated widths of the "real" cells into the floating copy to make sure they match up.
            var regularCells = stickiedElements.find("td,th");
            var stickyCells = stickyHeader.find("td,th");
            // stickyCells is a copy of regularCells, so the two lists above should have the exact same length
            regularCells.each(function(index) {
                var regularCell = $(this);
                var stickyCell = stickyCells.eq(index);
                stickyCell.css('width', regularCell.css('width'));
            })
        }

        function fixHeader() {
            if (firstNonStickyRow.length === 0) {
                // We don't have any table body. This should normally never happen, but if it does,
                // we can't meaningfully have a sticky header, so just give up.
                return;
            }
            var browserSize = NI.utils.browserSize() || "lg";
            // The sticky wrapper header will only appear when the last scroll was a reverse scroll
            var $wrapperStickyHeader = $(".ni-wrapper-header.nav-scroll-rev");
            var topOffset = 0;
            if ($wrapperStickyHeader.length > 0){
                topOffset = $wrapperStickyHeader.position().top + $wrapperStickyHeader.height();
            }
            var tableOffsetTop = body.offset().top,
                tableOffsetBottom = tableOffsetTop + body.height(),
                // stickyHeader may be hidden here, so we can't just call .height() on it
                // to get its height reliably. Instead, deduce it by measuring the vertical
                // space between the top of the regular table and the top of the first
                // non-sticky row.
                headerHeight = firstNonStickyRow.offset().top - tableOffsetTop,
                stickyTop = $(this).scrollTop() + topOffset,
                stickyBottom = stickyTop + headerHeight;
            if (browserSize !== 'xs' && stickyTop > tableOffsetTop && stickyBottom < tableOffsetBottom) {
                // The sticky header falls completely inside the visible part of the normal table,
                // so show it and make sure it's not hiding the site-wide header.
                if(!resizedBeforeSticky) {
                    resizeFixed();
                    resizedBeforeSticky = true;
                }
                stickyHeader.css('top', topOffset + 'px');
                stickyHeader.show();
            } else {
                stickyHeader.hide();
            }
        } 

        var lastScrollLeft = 0;
        function scrollFixedHeader() {
            var scrollLeft = stickyContainer.scrollLeft();
            if (lastScrollLeft !== scrollLeft) {
                stickyHeader.children().css('margin-left', '-' + scrollLeft + 'px');
                lastScrollLeft = scrollLeft;
            }
        }

        stickyContainer.scroll(scrollFixedHeader);
        $(window).resize(resizeFixed);
        $(window).scroll(fixHeader);
        $(document).on("shown.bs.collapse shown.bs.tab", ".panel-collapse, a[data-toggle='tab']", function () {            
            fixHeader();
            resizeFixed();
        });
        init();
    });
});
window.NI = NI || {};
window.NI.AEM = NI.AEM || {};
window.NI.AEM.core = NI.AEM.core || {};
window.NI.AEM.core.content = NI.AEM.core.content || {};

var ns = window.NI.AEM.core.content;

ns.SearchComponent = function(componentElement, autocompleteDatasource) {
	var that = this;

	this.wrapperElement = componentElement;

	this.searchInput = this.wrapperElement.querySelector('.search-component-input');
	
	this.searchForm = this.wrapperElement.querySelector('form');

	this.searchInput.addEventListener('input', function(){
		this.recommendations = undefined;
	});

	this._handleFormSubmit = function(event){
		that.searchForTerm();
		event.preventDefault();
	}

	this.searchForm.addEventListener('submit', that._handleFormSubmit);

	this._recommendationHandler = function(event, ui){
		// We need to convert from NodeList to Array
		var hits = Array.prototype.slice.call(event.currentTarget.querySelectorAll('li')).map(function(li){
			return li.innerText;
		});
		var suggestedHitIndex = hits.indexOf(ui.item.value);
		that.recommendations = {
			suggestedHitIndex: suggestedHitIndex,
			hits: hits.join(',')
		};
		that.setSearchTerm(ui.item.value);
	};
	this.recommendations = undefined;
	if (autocompleteDatasource) {
		$(this.searchInput).autocomplete({
			minLength: 3,
        	delay: 333,
			source : autocompleteDatasource,
			appendTo: this.wrapperElement.querySelector(".search-comp-autocomplete"),
			select: function(event,ui){
				that._recommendationHandler(event, ui);
				that.searchForTerm();
			},
			focus: function(event,ui){
				if (event.key){
					that._recommendationHandler(event,ui);
				}
			},
			position: {
	            "of": this.searchInput ,
	            "my":"left top",
	            "at":"left bottom",
	            "collosion": "fit none"
	        }
		});
	
	}

	this.selectScenario(this.wrapperElement
			.querySelector('.dropdown-menu li[selected]'));

	var scenarioElements = this.wrapperElement
			.querySelectorAll('.dropdown-menu li');

	for (var i = 0; i < scenarioElements.length; i++) {
		scenarioElements[i]
				.addEventListener(
						'click',
						function(event) {
							that.selectedScenario = this;
							that.setDropdownLabel(that.getCurrentScenarioSelection().displayName);
							event.preventDefault();
						});
	}

	var searchButton = this.wrapperElement.querySelector('.search-submit-button');

	searchButton.addEventListener('click', that._handleFormSubmit);
	
	searchButton.addEventListener('touchend', that._handleFormSubmit);
};

ns.SearchComponent.prototype.getSearchTerm = function() {
	return this.searchInput.value;
}

ns.SearchComponent.prototype.searchForTerm = function(searchTerm){
	if (searchTerm){
		this.setSearchTerm(searchTerm);
	}
	
	var searchBaseUrl = this.wrapperElement.querySelector(".search-comp-data-holder").getAttribute('data-search-base-url');

	NIAnalytics.captureSearchSubmit({
		onsiteSearchTypedOrSuggested : this.recommendations ? "suggested" : "typed" ,
		eventLabel : 'results:search',
		onsiteSearchAutocompleteRank : this.recommendations ? this.recommendations.suggestedHitIndex + 1 : "null",
		onsiteSearchAutocompleteLOV : this.recommendations ? this.recommendations.hits : "" 
	});

	var that = this;
	setTimeout(function() {
		window.location.href = searchBaseUrl + "?" + "sn="
				+ that.getCurrentScenarioSelection().searchFacets
				+ "&q=" + encodeURI(that.getSearchTerm());
	}, 200);
	
}

ns.SearchComponent.prototype.setSearchTerm = function(searchTerm) {
	this.searchInput.value = searchTerm;
}

ns.SearchComponent.prototype.setDropdownLabel = function(labelText) {
	this.wrapperElement.querySelector('.search-scenario-dropdown-label').innerText = labelText;
}

ns.SearchComponent.prototype.getLanguage = function() {
	var localeCookie = $.cookie("locale") || "en-US";

	if (localeCookie == "zh-CN") {
		return "zhs";
	} else if (localeCookie == "zh-TW") {
		return "zht";
	} else {
		return localeCookie.split("-")[0];
	}

}

ns.SearchComponent.prototype.selectScenario = function(scenario) {
	if (scenario instanceof HTMLElement) {
		this.selectedScenario = scenario;
	} else if (typeof scenario == 'string') {
		this.selectedScenario = this.scenarioElements.filter(function(element) {
			element.getAttribute('data-scenario') == scenario
		})[0];
	} else if (typeof scenario == 'number') {
		this.selectedScenario = this.scenarioElements[scenario];
	}
};

ns.SearchComponent.prototype.getAutocompleteUrl = function() {
	return this.wrapperElement.querySelector(".search-comp-data-holder").getAttribute('data-autocomplete-url');
}

ns.SearchComponent.prototype.getCurrentScenarioSelection = function() {
	return {
		displayName : this.selectedScenario.innerText,
		searchFacets : this.selectedScenario.getAttribute('data-facets'),
		scenario : this.selectedScenario.getAttribute('data-scenario')
	};
}

$(function() {
	$('.search-comp').each(function(i, component) {
		var searchComponent = new NI.AEM.core.content.SearchComponent(
			component,
			function(request, response) {
				var url = searchComponent.getAutocompleteUrl();
				$.ajax({
					url : url,
					dataType : "jsonp",
					data : {
						query : searchComponent.getSearchTerm(),
						maxscenariohits : 0,
						maxqueryhits : 5,
						scenario : searchComponent.getCurrentScenarioSelection().scenario,
						lang : searchComponent.getLanguage()
					},
					success : function(data) {
						response(data.map(function(hit) {
							return {
								value : hit.value,
								label : hit.label
							};
						}));
					}
				});
			});
	});
});

$(document).ready( function () {
    $('.rich-text-section p img').filter(function(i,elem){
		var possibleCaption = $(elem).parent().next();
        var imageContainer = $(elem).parent();
        if (possibleCaption.children().length == 1 && possibleCaption.children().prop("tagName") == 'I' ){
            imageContainer.css({"margin-top": "30px", "margin-bottom": "6px"});
            possibleCaption.css('margin-bottom','30px');
        }else{
			imageContainer.css({"margin-top": "30px", "margin-bottom": "30px"});
        }
    })



}); 
{

    const setNewHeadline = (getResultsForm) => {
        const mobileTextElement = document.querySelector(".ni__questionnaire-results-mobile-text");
        if(!mobileTextElement){
        	const eyebrow = document.querySelector('.ni__questionnaire-results-hero-eyebrow').textContent;
       		const headline =  document.querySelector('.ni__questionnaire-results-hero-headline').textContent;
        	const mobileText = document.createTextNode(eyebrow + ': ' + headline);
			const newTextElement = document.createElement("p");
            newTextElement.appendChild(mobileText);
            newTextElement.classList.add("ni__questionnaire-results-mobile-text");
        	getResultsForm.after(newTextElement);
    	}
    }

    const setImageElementPosition = () => {
        const getResultsForm = document.querySelector('.get-results-form form');
        const image = document.querySelector('.ni__questionnaire-results-hero-image');
        if(getResultsForm && window.screen.width<1024){
        	const formImage = document.querySelector('.get-results-form .ni__questionnaire-results-hero-image img');
            if(!formImage){
        		getResultsForm.after(image);
        	}
        	setNewHeadline(getResultsForm);
    	}else{
            const questionnaireHero = document.querySelector('.questionnaire-results-hero .ni__questionnaire-results-hero-text-content');
            if(questionnaireHero){
                questionnaireHero.after(image);
            }

            const mobileText = document.querySelector(".ni__questionnaire-results-mobile-text");
            if(mobileText){
                mobileText.remove();
            }


        }
    }

    NI.AEM.DOMReady.then(() => {
      setImageElementPosition();
      window.addEventListener('resize',setImageElementPosition,true);
    });
}
{
    let questionnaireHistory = [];
    let questionnaireDestinationUrl;
    let isEndQuestion = false;
    let questionnaireFirstSlide;

    const captureStartAnalytics = () => {
		NIAnalytics.captureAssessment({"eventName":"start"});
	};
	
	const captureAnswersAnalytics = (questionId, answerId) => {
		NIAnalytics.captureAssessment({"eventName":"answer","questionNr":questionId,"response":answerId});
	};

	const MakeRequest = async (id) => {
        const questionnaireSlideRequestUrl = id + '.html?wcmmode=disabled';
        try {
            const response = await fetch(questionnaireSlideRequestUrl);
            if(!response.ok) {
                const message = `An error has occured: ${response.status}`;
                throw new Error(message);
            }
            const data = await response.text();
            document.querySelector('#questionSlideDiv').innerHTML = data;
            checkEndQuestion();
            setupEndQuestionAnswers();
            adjustCircleProgressPosition();
            calculateAndUpdateProgress();
            setFinishButton();
        } catch (e) {
            console.log('Fetch Error: ', e);
        }
    };

    const setupOriginalStartButton = () => {
        const originalQuestionnaireStartButton = document.querySelector('.ni__questionnaire-rebrand__start-button__container a');
        if (originalQuestionnaireStartButton) {
			originalQuestionnaireStartButton.id = 'questionnaire-starter-button-original';
    	}
    };

    const checkEndQuestion = () => {
        if (document.querySelector('.ni__questionnaire-rebrand__slide-container').dataset.isendquestion) {
            isEndQuestion = true;
        } else {
            isEndQuestion = false;
        }
    };
    
    const setFinishButton = () => {
        if (isEndQuestion) {
            document.querySelector('.ni__questionnaire-rebrand__overlay__footer .finishtest').classList.remove('ni__questionnaire-rebrand__nav-button__hidden');
            document.querySelector('.ni__questionnaire-rebrand__overlay__footer .nextslide').classList.add('ni__questionnaire-rebrand__nav-button__hidden');
        } else {
            document.querySelector('.ni__questionnaire-rebrand__overlay__footer .finishtest').classList.add('ni__questionnaire-rebrand__nav-button__hidden');
            document.querySelector('.ni__questionnaire-rebrand__overlay__footer .nextslide').classList.remove('ni__questionnaire-rebrand__nav-button__hidden');
        }
    };
    
    const setupEndQuestionAnswers = () => {
        if (isEndQuestion) {
            const inputs = document.querySelectorAll('input[name="questiongroup"]');
            inputs.forEach(input => {
                input.setAttribute('value', questionnaireDestinationUrl);
            });
        }
    };
    
    const openQuestionnaireOverlay = element  => {
      element.classList.remove('ni__questionnaire-rebrand__overlay-container-hidden');
      element.classList.add('ni__questionnaire-rebrand__overlay-container-shown');
      document.querySelector('html').style.overflow = 'hidden';
      captureStartAnalytics();
    };
    
    const closeQuestionnaireOverlay = element => {
      element.classList.remove('ni__questionnaire-rebrand__overlay-container-shown');
      element.classList.add('ni__questionnaire-rebrand__overlay-container-hidden');
      document.querySelector('html').style.overflow = 'auto';
    };
    
    const openDialog = element  => {
      element.classList.remove('ni__questionnaire-rebrand__confirm-overlay-hidden');
      element.classList.add('ni__questionnaire-rebrand__confirm-overlay-shown');
    };
    
    const closeDialog = element => {
      element.classList.remove('ni__questionnaire-rebrand__confirm-overlay-shown');
      element.classList.add('ni__questionnaire-rebrand__confirm-overlay-hidden');
    };
    
    const checkAndSetPrevButton = () => {
        if(questionnaireHistory.length === 0) {
            document.querySelector(".prevslide").setAttribute("disabled", "");
        } else {
            document.querySelector(".prevslide").removeAttribute("disabled");
        }
    };
    
    const adjustCircleProgressPosition = () => {
        if (window.screen.width > 1023) {
            const questionContainer = document.querySelector('.ni__questionnaire-rebrand__question-container');
            const containerStyles = window.getComputedStyle(questionContainer);
            const margin = parseFloat(containerStyles['marginTop']) + parseFloat(containerStyles['marginBottom']);
            const adjustment =  Math.ceil(questionContainer.offsetHeight + margin);
            document.querySelector('.ni__questionnaire-rebrand__overlay__body .ni__questionnaire-rebrand__info-section').style.marginTop = `${adjustment}px`;
        } else {
            document.querySelector('.ni__questionnaire-rebrand__overlay__body .ni__questionnaire-rebrand__info-section').style.marginTop = '30px';
        }
    };
    
    const calculateAndUpdateProgress = () => {
        const actualLongestPath = parseInt(document.querySelector('.ni__questionnaire-rebrand__slide-container').dataset.longestpath);
		const percentage = questionnaireHistory.length / (questionnaireHistory.length + actualLongestPath);
		const circleElement = document.querySelector('.circle-progress-container .circle-progress');
		const circleRadius = circleElement.getAttribute('r');
		const progressPerimeter = (2 * circleRadius * Math.PI) * (1 - percentage);
		const roundedPercentage = Math.trunc(percentage * 100);
		circleElement.setAttribute('stroke-dashoffset', progressPerimeter);
		document.querySelector('.circle-progress-container .circle-progress-percentage').innerHTML = (roundedPercentage) + "%";
		document.querySelector('.progress-bar').style.width = `${roundedPercentage}%`;
		document.querySelector('.progress-bar-percentage').innerText = `${roundedPercentage}%`;
    }

    const resetQuestionnaireState = () => {
        MakeRequest(questionnaireFirstSlide);
        questionnaireHistory = [];
    	isEndQuestion = false;
    };
    
    const setupSlideNavButtons = () => {
    
        const questionnaireNextButton = document.querySelector(".ni__questionnaire-rebrand__overlay__footer .nextslide");
        if (questionnaireNextButton) {
            questionnaireNextButton.addEventListener('click', function() {
                const selectedRadioElement = document.querySelector("input[name='questiongroup']:checked");
                if (selectedRadioElement) {
                    const nextSlide = selectedRadioElement.value;
                    const exitLink = selectedRadioElement.dataset.exitlink;
                    if(nextSlide){
                        const actualSlide = document.querySelector('.ni__questionnaire-rebrand__slide-container').dataset.slidepath;
                        const slideId = document.querySelector('.ni__questionnaire-rebrand__slide-container').dataset.slidetitle;
                        const answerId = selectedRadioElement.id;
                        captureAnswersAnalytics(slideId, answerId);
                        if (exitLink) {
                            questionnaireDestinationUrl = exitLink;
                        }
                        MakeRequest(nextSlide);
                        questionnaireHistory.push(actualSlide);
                        checkAndSetPrevButton();
                    } else {
                        if (exitLink) {
                            window.location.href = targetPage;
                        }
                    }
                } else {
                    const noRadioSelectedOverlay = document.querySelector('.ni__questionnaire-rebrand__no-radio-overlay');
                    openDialog(noRadioSelectedOverlay);
                }            
                return false;}, false);
        }
        
        const questionnairePrevButton = document.querySelector(".ni__questionnaire-rebrand__overlay__footer .prevslide");
        if (questionnairePrevButton) {
            questionnairePrevButton.addEventListener('click', function() {
                const prevSlide = questionnaireHistory.pop();
                    if(prevSlide){
                        MakeRequest(prevSlide);
                        checkAndSetPrevButton();
                    }
                return false;}, false);
        }
    
        const questionnaireFinishButton = document.querySelector(".ni__questionnaire-rebrand__overlay__footer .finishtest");
        if (questionnaireFinishButton) {
            questionnaireFinishButton.addEventListener('click', function() {
                const selectedElement = document.querySelector("input[name='questiongroup']:checked");
                    if(selectedElement){
                        const slideId = document.querySelector('.ni__questionnaire-rebrand__slide-container').dataset.slidetitle;
                        const answerId = selectedElement.id;
                        captureAnswersAnalytics(slideId, answerId);
                        const targetPage = selectedElement.value;
                        window.location.href = targetPage;
                    } else {
                        const noRadioSelectedOverlay = document.querySelector('.ni__questionnaire-rebrand__no-radio-overlay');
                        openDialog(noRadioSelectedOverlay);
                    }
                return false;}, false);
        }
    };

    const setupGeneralActionButtons = () => {
        if (document.querySelector('.ni__questionnaire-rebrand__container')) {
            const questionnaireOverlay = document.querySelector('.ni__questionnaire-rebrand__overlay-container-hidden');
            const questionnaireStarterButtons = document.querySelectorAll('[id^="questionnaire-starter-button"]');

            questionnaireStarterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    openQuestionnaireOverlay(questionnaireOverlay);
                    adjustCircleProgressPosition();
                    checkEndQuestion();
                    setFinishButton();
                    checkAndSetPrevButton();
                }, false);
            });

            const questionnaireOverlayCloseButton = document.querySelector('.ni__questionnaire-rebrand__overlay__close-button');
            const questionnaireExitDialog = document.querySelector('.ni__questionnaire-rebrand__exit-overlay');
            const questionnaireExitDialogYes = document.querySelector('.ni__questionnaire-rebrand__confirm-overlay__yes');
            const questionnaireExitDialogNo = document.querySelector('.ni__questionnaire-rebrand__confirm-overlay__no');
            const noRadioSelectedOverlay = document.querySelector('.ni__questionnaire-rebrand__no-radio-overlay');
            const noRadioSelectedOverlayButton = noRadioSelectedOverlay.querySelector('button');

            questionnaireOverlayCloseButton.addEventListener('click', function() {openDialog(questionnaireExitDialog);}, false);
            questionnaireExitDialogYes.addEventListener('click', function() {
                closeDialog(questionnaireExitDialog);
                closeQuestionnaireOverlay(questionnaireOverlay);
                resetQuestionnaireState();
            }, false);
            questionnaireExitDialogNo.addEventListener('click', function() {closeDialog(questionnaireExitDialog);}, false);
            noRadioSelectedOverlayButton.addEventListener('click', function() {closeDialog(noRadioSelectedOverlay);}, false);
        }
    };

    NI.AEM.DOMReady.then(() => {
        setupOriginalStartButton();
        setupSlideNavButtons();
        setupGeneralActionButtons();

        if(document.querySelector('.ni__questionnaire-rebrand__container')) {
            questionnaireFirstSlide = document.querySelector('.ni__questionnaire-rebrand__slide-container').dataset.slidepath;
		    window.addEventListener('resize', adjustCircleProgressPosition, true);
        }
	});
}
{
    let componentTextBoxes;
    const componentWidthsAndHeights = new Map();

    const smallBreakPoint = window.matchMedia("(max-width: 767px)")

    const setTopMargin = () => {
        document.querySelectorAll('.leadspace').forEach(function (leadspace) {
            let flexChildList = leadspace.querySelectorAll('.flex-child');

            flexChildList.forEach(function (flexChild) {
                flexChild.classList.remove("wrapped-flex-child")
            });

            if (flexChildList.length > 1) {
                let firstFlexOffsetTop = flexChildList[0].offsetTop;

                flexChildList.forEach(function (flexChild) {
                    let offsetTop = flexChild.offsetTop;

                    if (offsetTop != firstFlexOffsetTop) {
                        flexChild.classList.add("wrapped-flex-child");
                    }
                });
            }
        });
    };

    const initComponents = () => {
        componentTextBoxes = document.querySelectorAll(".leadspace .overlay-blue.overlay");

        componentTextBoxes.forEach(componentTextBox => setWidth(componentTextBox));
    };

    const setWidth = (componentTextBox) => {
        let currentWidth = componentTextBox.getBoundingClientRect().width;
        const parentHeight = componentTextBox.parentElement.getBoundingClientRect().height;
        const parentWidth = componentTextBox.parentElement.getBoundingClientRect().width;
        while (componentTextBox.getBoundingClientRect().height > parentHeight
            && currentWidth + 10 < parentWidth) {
            currentWidth += 10;
            componentTextBox.style.width = currentWidth + "px";
        }

        componentWidthsAndHeights.set(componentTextBox, [currentWidth, componentTextBox.getBoundingClientRect().height]);
    };

    const updateComponentOnResize = () => {
        setTopMargin();

        componentTextBoxes.forEach(componentTextBox => {
            const component = componentTextBox.getBoundingClientRect();
            const parentWidth = componentTextBox.parentElement.getBoundingClientRect().width;
            const parentHeight = componentTextBox.parentElement.getBoundingClientRect().height;
            if (smallBreakPoint.matches) {
                componentTextBox.style.width = null;
            } else if (componentWidthsAndHeights.get(componentTextBox)[1] != component.height
                || component.width > parentWidth
                || (component.width < parentWidth && component.height > parentHeight)) {
                componentTextBox.style.width = null;
                setWidth(componentTextBox);
            } else {
                componentTextBox.style.width = componentWidthsAndHeights.get(componentTextBox)[0] + "px";
            }
        });
    };

    document.addEventListener("DOMContentLoaded", initComponents);
    window.addEventListener('load', setTopMargin);
    window.addEventListener("resize", updateComponentOnResize);
}
$(document).ready( function () {

	var myNIUA = NIUA.getNIUA({"minutesBeforeExpire": 2, "apikey":"0d6a398d-7ff4-4f12-9086-7045b65bf2ca"});

	var downloadButtonHref = $(".contact-enrichment-form .download-button a").attr("href");
	$(".contact-enrichment-form .download-button a").attr("href","#");

	myNIUA.ready().then(function(){
    	myNIUA.getEmail().then(function(data){
            if (data.response.success){
				$(".contact-enrichment-form .email-input input").val(data.response.email);
				$(".contact-enrichment-form .email-input").hide();
				//Required for mobile form to set margins correctly. (Last dropdown must have smaller margin if email dropdown is missing)
                $(".contact-enrichment-form .contact-enrichment-fields").addClass("email-field-hidden");
            }
    	});
  	});

    function isDefaultOptionSelected($input){
        var $select = $input.find("select");
		return $select.val() == $select.data('default-value');
    }

    function isEmailInputValid($input){
        var validationData = NI.forms.validation.validate($input);
		return validationData.valid;
    }

    function sendAjaxPostRequest($form){
		$.post(
			$form.attr("action"),
            $form.serialize()
        ).always(function() {
            window.location.href = downloadButtonHref;
        });
    }

    $(".contact-enrichment-form .download-button").click(function(e){

        var isValidForm = true;

        $(".contact-enrichment-form .ni-dropdown").each(function(){
            var $selectMenu = $(this).find(".ui-selectmenu-button");
            var $selectElement = $(this).find("select:required");
            if ($selectElement.length != 0 && isDefaultOptionSelected($(this))){
                $selectMenu.css({"border-color" : "#d73a0f"});
                isValidForm = false;
            }else{
                $selectMenu.css({"border-color" : ""})
            }
        });

        var $emailInputDiv = $(".contact-enrichment-form .email-input");
		var $emailInput = $emailInputDiv.find("input:required");
        if ($emailInput.length != 0 && !isEmailInputValid($emailInput)) {
			isValidForm = false;
            $emailInputDiv.find(".form-group").addClass("ni-invalid");
        }else{
            $emailInputDiv.find(".form-group").removeClass("ni-invalid");
        }

		var $checkboxInputDiv = $(".contact-enrichment-form .privacy-container");
		var $checkboxInput = $checkboxInputDiv.find("input:required");
        if($checkboxInput.length > 0){
            if($checkboxInput.is(':checked')){
                $(".contact-enrichment-form .privacy-error-message").hide();
            } else {
                isValidForm = false;
                $(".contact-enrichment-form .privacy-error-message").show();
            }
        }

        if (isValidForm){
			sendAjaxPostRequest($(this).closest("form"));
        } else {
			e.preventDefault();
        }

    });

    $(".contact-enrichment-form .dropdown-input select:required").change(function(){
        if (!isDefaultOptionSelected($(this))){
            $(this).siblings(".ui-selectmenu-button").css({"border-color" : "#ccc"});
        }
    });
});

window.NI = window.NI || {};
window.NI.AEM = window.NI.AEM || {};
window.NI.AEM.core = window.NI.AEM.core || {};
window.NI.AEM.core.children = window.NI.AEM.core.children || {};

var ns = window.NI.AEM.core.children;

var videoRegistry = new Array();
ns.BrightcoveVideo = function(brightcoveVideoId, autoplay, containerElement, language) {
    this.containerElement = containerElement;
    this.language = language || "en";
    this.brightcoveVideoId = brightcoveVideoId;
    this.autoplay = autoplay;
    videoRegistry.push(this);

    var videoURL = "//players.brightcove.net/1326282160001/2e63b63e-02d2-4d43-84ba-0a0adb5074d0_default/index.html?videoId=" + brightcoveVideoId + "&lang=" + language;        
    
    if (autoplay) {
        videoURL += "&autoplay=" + this.autoplay;
    }

    this.eventHandlers= {
        start: new Array(),
        end: new Array()
    };

    containerElement.innerHTML = "<div style='display: block; position: relative; max-width: 100%;'>"+
                                                "<div style='padding-top: 56.25%;'>" +
                                                    "<iframe src='" + videoURL + "' allowfullscreen='' webkitallowfullscreen='' mozallowfullscreen='' frameBorder='0' scrolling='no' " +
                                                    "style='width: 100%; height: 100%; position: absolute; top: 0px; bottom: 0px; right: 0px; left: 0px; overflow:hidden; background-color:#000'>" +
                                                    "</iframe>"+
                                                "</div>"+
                                            "</div>";

    var videoStartAnalyticsCallSent = false;
    this.onVideoStart(function(event){
        if (!videoStartAnalyticsCallSent){
            NIAnalytics.captureMedia({
                eventName:'start',
                mediaLength: event.mediaLength,
                mediaName: event.mediaName
            });
            videoStartAnalyticsCallSent = true;
        }
    });

    var videoEndedAnalyticsCallSent = false;
    this.onVideoEnd(function(event){
        if (!videoEndedAnalyticsCallSent){
            NIAnalytics.captureMedia({
                eventName: 'complete',
                mediaLength: event.mediaLength,
                mediaName: event.mediaName
            });
            videoEndedAnalyticsCallSent = true;
        }
    });

};

ns.BrightcoveVideo.prototype.onVideoStart = function(callback){
    this.eventHandlers['start'].push(callback);
}

ns.BrightcoveVideo.prototype.onVideoEnd = function(callback){
    this.eventHandlers['end'].push(callback);
}

ns.BrightcoveVideo.prototype.removePlayer = function() {
    this.containerElement.innerHTML = "";
};

ns.BrightcoveVideo.prototype._getIFrame = function() {
    if (this.containerElement){
        return this.containerElement.querySelector('iframe');
    }
};

ns.BrightcoveVideo.prototype._getEventHandlers = function() {
    return this.eventHandlers;
};

ns.BrightcoveVideo.prototype.getBrightcoveVideoId = function() {
    return this.brightcoveVideoId;
};

window.addEventListener("message", function(event) {
    if (event.origin.indexOf("brightcove.net") > -1){
        var brightcoveVideo = getBrightcoveVideoByIFrameWindow(event.source);
        
        brightcoveVideo._getEventHandlers()[event.data.type].forEach(function(handler){
            handler(event.data);
        });
    }

});

function getBrightcoveVideoByIFrameWindow(iframe){
    for (var i = 0 ; i<videoRegistry.length ; i++){
        var video = videoRegistry[i];
        if (video._getIFrame().contentWindow == iframe){
            return video;
        }
    }
}

window.NI = window.NI || {};
window.NI.AEM = window.NI.AEM || {};
window.NI.AEM.core = window.NI.AEM.core || {};
window.NI.AEM.core.children = window.NI.AEM.core.children || {};

var ns = window.NI.AEM.core.children;

ns.VideoChild = function(wrapperElement){

    var that = this;
    this.niua = NIUA.getNIUA({});

    this.wrapperElement = wrapperElement;

    this.wrapperElement.querySelector('.brightcove-player-gated-container a').addEventListener('click',function(event){
        var cookieraw = $.cookie.raw;
        var bcid = that.getBrightcoveVideoId();
        $.cookie.raw = true;
        if ($.cookie("gbVisited")) {
            $.cookie("gbVisited", btoa(atob($.cookie("gbVisited")) + ";" + bcid), {
                path: "/",
                domain: "ni.com",
                expires: 7
            });
        } else {
            $.cookie("gbVisited", btoa(bcid), {
                path: "/",
                domain: "ni.com",
                expires: 7
            });
        }
        $.cookie.raw = cookieraw;
    })
    
    this.playerWrapper = this.wrapperElement.querySelector('.brightcove-player');
    
    if (!this.getGuestbookCode()){
        this.showVideoPlayer();
    }

    if (this.getGuestbookCode() && $.cookie("gbVisited")) {
        var bcids = atob($.cookie("gbVisited")).split(";");
        return this.niua.getSession()
            .then(function (data) {
                if(!data.loggedIn){
                    $.cookie("gbVisited", null, {
                        path: "/",
                        domain: "ni.com",
                        expires: 0
                    });
                }
                if ((data.loggedIn && bcids.includes(that.getBrightcoveVideoId()))){
                    that.showVideoPlayer();
                }
        });
    }    

}

ns.VideoChild.prototype.showVideoPlayer = function(){
    this.wrapperElement.querySelector('.brightcove-player-gated-container').style.display = 'none';
    this.wrapperElement.querySelector('.brightcove-player-non-gated-container').style.display = 'block';
    
    var brightcoveVideoPlayerTargetContainer = this.wrapperElement.querySelector('.brightcove-player-container');

    this.brightcoveVideo = new NI.AEM.core.children.BrightcoveVideo(this.getBrightcoveVideoId(), false, brightcoveVideoPlayerTargetContainer);

    var that = this;
    var videoStartAnalyticsCallSent = false;
    this.brightcoveVideo.onVideoStart(function(eventData){
        if (!videoStartAnalyticsCallSent) {
            var analyticsPayload = {
                eventName: 'video',
                eventLabel: eventData.mediaName,
				eventAction: 'start'
            };
            if (that.getGuestbookCode()) {
                analyticsPayload.gbroot = 'GB_' + that.getGuestbookCode();
            }
            NIAnalytics.captureMultimedia(analyticsPayload);
            videoStartAnalyticsCallSent = true;
        }
    });
	
		var videoCompletedAnalyticsCallSent = false;
    this.brightcoveVideo.onVideoEnd(function(eventData){
        if(!videoCompletedAnalyticsCallSent){
			var analyticsPayload = {
                eventName: 'video',
                eventLabel: eventData.mediaName,
                eventAction: 'complete'
            };
            if (that.getGuestbookCode()) {
                analyticsPayload.gbroot = 'GB_' + that.getGuestbookCode();
            }
            NIAnalytics.captureMultimedia(analyticsPayload);
            videoCompletedAnalyticsCallSent = true;
        }
    })
}

ns.VideoChild.prototype.getBrightcoveVideoId = function(){
    var bcid =  this.playerWrapper.getAttribute("data-bcid");
    if(bcid === undefined){
        var brightcoveVideoPlayerTargetContainer = this.wrapperElement.querySelector('.brightcove-player-container');
        bcid = brightcoveVideoPlayerTargetContainer.getAttribute('data-bcid');
    }
    return bcid;
}

ns.VideoChild.prototype.getGuestbookCode = function(){
    return this.playerWrapper.getAttribute('data-guestbook-code');
}

ns.VideoChild.prototype.getBrightcoveVideo = function(){
    return this.brightcoveVideo;
}

ns.VideoChild.prototype.getVideoChildTitle = function() {
    return this.wrapperElement.querySelector('h2').innerText;
}


$(window).load(function() {

    $(".video-child-component").each(function(i,component){
        var video = new NI.AEM.core.children.VideoChild(component);

    })

});
var fireStartOnce = false;
var fireEndOnce = false;
window.isModal = false;

var lastBrowserSize;

$(window).load(function() {
    if ($('.ni-video-card-overlay-play-icon').length) {
        fixVideoCardHeight();
        var browserSize = NI.utils.browserSize();
        $(document).on('click','.ni-video-card-overlay-play-icon', function() {
            var videoId = $(this).attr("data-uid");
            var myPlayer = videojs(videoId);
            $('#ni-video-card-modal-' + videoId).dialog("open");	
            if(!(browserSize === "md" || browserSize === "lg")) {
                myPlayer.enableTouchActivity();
                myPlayer.requestFullscreen();
                myPlayer.on('fullscreenchange', function() {
                    if (!myPlayer.isFullscreen()) {
                        myPlayer.pause();
                        $('#ni-video-card-modal-' + videoId).dialog("close");	
                    }
                });
            }
            
            myPlayer.play();
            fireStartOnce = false;
            fireEndOnce = false;
            myPlayer.on("play", onMediaEventFired);
            myPlayer.on("ended", onMediaEventFired);  
            
        });
        
        if(!(browserSize === "md" || browserSize === "lg")) {
            $(document).on('click','.ni-video-card-overlay-panel', function() {
                    $(this).toggleClass("hovered");
            });
            
            $(document).on('click','.ni-video-card-play', function() {
                $(this).toggleClass("hovered");
            });
        }
    }
});

$(window).resize(function(){
    if (lastBrowserSize !== NI.utils.browserSize()) {
        lastBrowserSize = NI.utils.browserSize();
        fixVideoCardHeight();        
    }
});

function fixVideoCardHeight() {        
    var max = 0, height, width = 0, currentHeight, currentWidth, percentage = 100;    
    currentWidth = $('.ni-card-overlay:first-child').width();
    $('.ni-video-card-play').each(function(){
        if (width === 0) {
            width = $(this).find('.ni-video-card-overlay-content').eq(0).width();
            percentage = width * 100 / currentWidth;
        }
        height = $(this).find('.ni-video-card-overlay-content').eq(0).height() * 100 / percentage;
        if (height > max) {
            max = height;
        }        
    });
    $('.ni-video-card-play').css('height', '');
    currentHeight = $('.ni-video-card-play:first-child').height();    
    if (currentHeight < max) {
        $('.ni-video-card-play').css('height', max + 'px');        
    }    
    
    var picWidth, picHeight;
    $('.ni-video-card-play').each(function(){
        width = $(this).width();
        height = $(this).height();                 
        if (width >= height) {
            $(this).find('.ni-video-card-image').eq(0).css('width', '100%').css('height', 'auto');            
        } else {
            $(this).find('.ni-video-card-image').eq(0).css('height', '100%').css('width', '').css('max-width', 'auto');
        }
        picWidth = $(this).find('.ni-video-card-image').eq(0).width();
        picHeight = $(this).find('.ni-video-card-image').eq(0).height();
        if (picHeight < height) {
            $(this).find('.ni-video-card-image').eq(0).css('height', '100%').css('width', '').css('max-width', 'auto');
        }
        if (picWidth < width) {
            $(this).find('.ni-video-card-image').eq(0).css('width', '100%').css('height', 'auto');  
        }
    });
}

function onMediaEventFired(event){
    var type = event.type;
    var mediaLength = 0;
    var mediaName = event.target;
    var mediaID = event.target.id;  //Required video id
    var mediaFriendly = event.target.player.mediainfo.name; //Required video title
    var mediaName = mediaID + ":" + mediaFriendly;
    
    if (event.type === "play"){
        try {
            if (!fireStartOnce){
                s.Media.open(mediaName,mediaLength,mediaPlayerName);
                s.events = null;
                s.contextData['complete'] = "";
                s.contextData['start'] = "video";
                s.Media.track(mediaName);
                fireStartOnce = true;
            }
        } catch (e) {
          console.log (e);
        }
    }
    if (event.type === "ended"){
        try {
            if (!fireEndOnce){
                s.Media.stop(mediaName,mediaOffset);
                s.Media.close(mediaName);
                s.events = "event16";
                s.contextData['start'] = "";
                s.contextData['complete'] = "video";
                s.Media.track(mediaName);
                fireEndOnce = true;
            }
        } catch (e) {
          console.log (e);
        }
    }
} 

function initializeVideoModalWindow(videoId) {
    var id = "#ni-video-card-modal-" + videoId;
    
    $(id).dialog({
        dialogClass: 'ni-modal-window',
        closeOnEscape: false,
        resizable: false,
        draggable: false,
        autoOpen: false,
        modal: true,
        width:'auto',
        create: function(event, ui){
            $().hide();
        },
        open: function(event, ui){
            //Overlay
            $(".ui-widget-overlay").css({"background":"#b2b2b2",opacity:".85",filter:"alpha(opacity=85)","z-index":1030});
            //Dialog z-axis
            $(id).parent("div.ui-dialog").css({"z-index":"1031"});
            window.isModal = true;
            //Closing Event
            $(".ui-widget-overlay, " + id + " .close").on('click', function(){
                $(id).dialog("close");
                var myPlayer = videojs(videoId);
                window.isModal = false;
                myPlayer.pause();
            });
        }
    });
}
NI.AEM.DOMReady.then(async () => {
	const apiKey = "d10a1f14-3bcf-4177-9dec-54da6b331837";
	const injectables = document.querySelectorAll("[data-price-for]");
	if (injectables.length > 0) {
		const myNIUA = NIUA.getNIUA({});
		let yearNIUIClass = "";
		let priceNIUIClass = "";
		if (document.querySelector('meta[name="use-niui"]')) {
			priceNIUIClass = "u-ni-font-subtitle-formal-medium-compact ";
			yearNIUIClass = "u-ni-font-body-default ";
		}
		
		try {
			await myNIUA.ready();

			const prices = new Map();
			
			const getLocalizedMessages = (element, knownLocalizations, unknownLocalizations) => {
				const dataset = element.dataset;
				const englishPricingMessage = dataset.pricingMessage || "Starting from {0}";
				const englishEntitledPricingMessage = dataset.entitledPricingMessage || englishPricingMessage.replace("Starting from ", "");
				let localizedPricingMessage = dataset.localizedPricingMessage || knownLocalizations.get(englishPricingMessage);
				if (!localizedPricingMessage) {
					unknownLocalizations.add(englishPricingMessage);
					localizedPricingMessage = englishPricingMessage;
				}
				let localizedEntitledPricingMessage = dataset.localizedEntitledPricingMessage || knownLocalizations.get(englishEntitledPricingMessage);
				if (!localizedEntitledPricingMessage) {
					unknownLocalizations.add(englishEntitledPricingMessage);
					localizedEntitledPricingMessage = englishEntitledPricingMessage;
				}
				return {pricingMessage: localizedPricingMessage, entitledPricingMessage: localizedEntitledPricingMessage};
			};
			
			const fetchLocalizations = async (locale, knownLocalizations, unknownLocalizations) => {
				if (unknownLocalizations.size === 0) {
					// nothing to do
					return;
				}
				try {
					const params = new URLSearchParams();
					for (const s of unknownLocalizations) {
						params.append('t', s);
					}
					const response = await fetch('/bin/ni/localize.' + locale + '.json?' + params);
					if (response.ok) {
						const data = await response.json();
						for (const [key, value] of Object.entries(data)) {
							knownLocalizations.set(key, value);
						}
					}
				} catch (e) {
					// ignore
				}
			};
			
			
			const getPricingHeaders = () => {
				const headers = new Headers();
				// NIUA doesn't support the Fetch API at the moment, so we need to dig into the internals a bit.
				// Ideally this should be removed and the NIUA API improved to support Fetch directly.
				const token = myNIUA.createNIAuthToken();
				if (token !== null) {
					headers.append('X-NI-Auth-Token', token);
				}
				headers.append('x-ni-api-key', apiKey);
				headers.append('Accept', 'application/json');
				return headers;
			}
			
			const getStartingAtPrices = async (url, prefix) => {
				try {
					const response = await fetch(url, {headers: getPricingHeaders()});
					if (response.ok) {
						const data = await response.json();
						for (const priceData of data.startingAtPriceData.startingAtPrices) {
							if (!priceData.startingAtPriceError && priceData.formattedStartingAtListPrice !== null) {
								prices.set(prefix + priceData.id, {originalPrice: priceData.formattedStartingAtListPrice, discountedPrice: priceData.formattedStartingAtUnitPrice});
							}
						}
					}
				} catch (e) {
					// ignore
				}
			};
			
			const getSKUPrices = async (url, prefix, ids) => {
				const postData = {};
				const products = [];
				for (let i = 0; i < ids.length; i++) {
					const product = {
						lineId: (i + 1).toString(),
						quantity: '1',
						partNumber: ids[i]
					};
					products.push(product);
				}
				postData.query = {'products' : products};
				
				try {
					const headers = getPricingHeaders();
					headers.append('Content-Type', 'application/json');
					const response = await fetch(url, {
						method: 'POST',
						headers: headers,
						body: JSON.stringify(postData)
					});
					if (response.ok) {
						const data = await response.json();
						if (data.priceData) {
							for (const priceData of data.priceData.items) {
								if (priceData.formattedListPrice !== null) {
									prices.set(prefix + priceData.partNumber, {originalPrice: priceData.formattedListPrice, discountedPrice: priceData.formattedUnitPrice});
								}
							}
						}
					}
				} catch (e) {
					// ignore
				}
			};
			
			const formatPricingMessage = (message, price, priceClasses) => {
				const priceMessageParts = message.split(/(\{0\})/);
				const priceMessageDom = [];
				for (let idx = 0; idx < priceMessageParts.length; idx++) {
					const value = priceMessageParts[idx];
					if (value === '{0}') {
						const newElem = document.createElement('span');
						newElem.className = 'price ' + priceNIUIClass + priceClasses;
						newElem.textContent = price;
						priceMessageDom.push(newElem);
					} else if ((value !== '')&&(idx === 2)){
						const newElem = document.createElement('span');
						newElem.className = 'year ' + yearNIUIClass;
						newElem.textContent = value;
						priceMessageDom.push(newElem);
					} else{
						priceMessageDom.push(value);
					}
				}
				return priceMessageDom;
			};

			const matches = /(?:^|;)[ \t\r\n]*locale=([-a-zA-Z]+)(?:;|$)/.exec(document.cookie);
			const localeCookie = matches && matches[1];
			const products = new Set();
			const models = new Set();
			const productItems = new Set();
			const locale = localeCookie || document.documentElement.dataset.aemFallbackLocale;
			const promises = [];
			const knownLocalizations = new Map([['{0}','{0}']]);
			const unknownLocalizations = new Set();
			
			/* Multiple components may be interested in the same price, but we should send each price ID
			 * to the service only once, both to improve performance and to sidestep some known IBM Commerce bugs.
			 */
			for (const injectable of injectables) {
				const priceId = injectable.dataset.priceFor;
				if (priceId.startsWith('pr:')) {
					products.add(priceId.slice(3));
				} else if (priceId.startsWith('mo:')) {
					models.add(priceId.slice(3));
				} else if (priceId.startsWith('pi:')) {
					productItems.add(priceId.slice(3));
				}
				// call the localization method to figure out what localizations we may be missing
				getLocalizedMessages(injectable, knownLocalizations, unknownLocalizations);
			}
			
			if (products.size > 0) {
				const url = '/nicom-pricing/1/startingAtPrices/' + locale.toLowerCase() + '/byProduct?id=' + Array.from(products);
				promises.push(getStartingAtPrices(url, "pr:"));
			}
			
			if (models.size > 0) {
				const url = '/nicom-pricing/1/startingAtPrices/' + locale.toLowerCase() + '/byModel?id=' + Array.from(models);
				promises.push(getStartingAtPrices(url, "mo:"));
			}
			
			if (productItems.size > 0) {
				const url = '/nicom-pricing/1/prices/' + locale.toLowerCase();
				promises.push(getSKUPrices(url, "pi:", Array.from(productItems)));
			}
			
			promises.push(fetchLocalizations(locale, knownLocalizations, unknownLocalizations));

			await Promise.all(promises);

			/* The DOM may have changed between the kickoff and completion of the service call. For example, the
			 * sticky table header functionality makes a clone of some table cells, some of which may contain
			 * pricing-aware elements. To account for this, build a fresh element list instead of reusing the "injectables"
			 * variable. Note that this still won't support dynamic addition of arbitrary pricing elements since those could
			 * require kicking off a new service call, but cloning existing pricing elements will work.
			 */
			for (const injectable of document.querySelectorAll("[data-price-for]")) {
				const priceId = injectable.dataset.priceFor;
				
				if (prices.has(priceId)) {
					const price = prices.get(priceId);
					const isDiscounted = price.discountedPrice && (price.originalPrice !== price.discountedPrice);
					const classes = injectable.classList;
					classes.remove("has-discount", "no-discount");
					classes.add(isDiscounted ? "has-discount" : "no-discount");
					
					const messages = getLocalizedMessages(injectable, knownLocalizations, unknownLocalizations)
					const priceMessageDom = [];
					const listPriceElement = document.createElement("span");
					listPriceElement.className = "pricing-message list-price";
					listPriceElement.append(...formatPricingMessage(messages.pricingMessage, price.originalPrice, isDiscounted ? "discounted" : ""));
					priceMessageDom.push(listPriceElement);
					if (isDiscounted) {
						const entitledPriceElement = document.createElement("div");
						entitledPriceElement.className = "pricing-message entitled-price";
						entitledPriceElement.append(...formatPricingMessage(messages.entitledPricingMessage, price.discountedPrice, "entitled"));
						priceMessageDom.push(entitledPriceElement);
					}
					injectable.replaceChildren(...priceMessageDom);
				} else {
					for (const fallback of document.querySelectorAll("[data-fallback-content-for-price='"+priceId+"']")) {
						// we have a "display:none" CSS rule, so override it inline to make the element show
						fallback.style.display = 'unset';
					}
					for (const dependent of document.querySelectorAll("[data-dependent-on-price='"+priceId+"']")) {
						dependent.hidden = true;
					}
				}
			}
		} catch (e) {
			for (const fallback of document.querySelectorAll("[data-fallback-content-for-price]")) {
				// we have a "display:none" CSS rule, so override it inline to make the element show
				fallback.style.display = 'unset';
			}
			for (const dependent of document.querySelectorAll("[data-dependent-on-price]")) {
				dependent.hidden = true;
			}
		};
	}
});

NI.AEM.DOMReady.then(() => {
	for (const placeholder of document.querySelectorAll('.float-placeholder')) {
		const replacement = document.querySelector("[data-id='" + placeholder.id + "']");
		if (replacement) {
			placeholder.replaceWith(replacement);
		}
	}
	
	for (const video of document.querySelectorAll('.richtext .brightcove-player-container, .rich-text-section-entry .brightcove-player-container')) {
		new NI.AEM.core.children.BrightcoveVideo(video.dataset.bcid, false, video);
	}
});

$(function(){
    	var browserSize = NI.utils.browserSize();

        function setHeight(show_more_element, height){
            $(show_more_element).attr("data-height", height);
            $(show_more_element).css({"height":height.toString()+"px", "overflow": "hidden"});
            $(show_more_element).next('.inline-collapsed').show();
            $(show_more_element).dotdotdot({
                ellipsis:'...',
                wrap: 'letter'
            });
        }

        function truncateText(show_more_element){
            var height = 160, show_more_height = 0;
            //Validating if it is media-feature's child
            if(mediaParentComponentCheck(show_more_element)){
				//Checking to see if media is image or video
				if($(show_more_element).closest('.mediafeature-col2').prev('.mediafeature-col1').children().hasClass('section-media')){
					if($(show_more_element).closest('.mediafeature-col2').children().hasClass('mediafeature-title')){
						height -= $(show_more_element).closest('.mediafeature-col2').children('.mediafeature-title').height();
						height -= $(show_more_element).next('.inline-collapsed').height();
					}
					show_more_height = Math.abs(height / parseInt($(show_more_element).css('line-height').replace('px',''))) * parseInt($(show_more_element).css('line-height').replace('px',''));
					setHeight(show_more_element, Math.abs(show_more_height));
				}else{
					if($(show_more_element).closest('.mediafeature-col2').children().hasClass('mediafeature-title')){
						height -= $(show_more_element).closest('.mediafeature-col2').children('.mediafeature-title').height();
						height -= $(show_more_element).next('.inline-collapsed').height();
					}
					setHeight(show_more_element, Math.abs(height));
				}
            }else{
                // Show-more-text doesn't have a media feature parent.
                height = 70;
                show_more_height = Math.abs(height / parseInt($(show_more_element).css('line-height').replace('px',''))) * parseInt($(show_more_element).css('line-height').replace('px',''));
                setHeight(show_more_element, Math.abs(show_more_height));
            }
        }

        function checkScreenSize(show_more_element, screen_size){
            switch(screen_size){
                case 'desktop': return $(show_more_element).hasClass('truncateDesktop');
                case 'tablet': return $(show_more_element).hasClass('truncateTablet');
                case 'mobile': return $(show_more_element).hasClass('truncateMobile');
            }
        }
    
        function mediaParentComponentCheck(show_more_element){
            return $(show_more_element).parents('.media-feature').length;
        }

        function checkTextHeight(show_more_element){
            if(mediaParentComponentCheck(show_more_element)){
                return $(show_more_element).height() > 218;
            }
            return $(show_more_element).height() > 75;
        }

        function prepareReadMoreElements() {
            $('.read-more-paragraph:not([data-height])').filter(":visible").each(function(index){
    			var truncated = false;
                if(checkScreenSize(this, 'desktop') && checkTextHeight(this)){
                	if((browserSize === "md" || browserSize === "lg") && !truncated){
                		truncateText(this);
                		truncated = true;
                	}
                }
                if(checkScreenSize(this, 'tablet') && checkTextHeight(this)){
                	if(browserSize === "sm" && !truncated){
                		truncateText(this);
                		truncated = true;
                	}
                }
                if(checkScreenSize(this, 'mobile') && checkTextHeight(this)){
                	if(browserSize === "xs" && !truncated){
                		truncateText(this);
                		truncated = true;
                	}
                }
            });
        }
        
        prepareReadMoreElements();
        
        // Tabs and accordions hide some of their elements initially, then show them on user interaction.
        // Make sure that we handle elements that become visible when a tab/panel is shown.
        $(document).on('shown.bs.collapse shown.bs.tab', prepareReadMoreElements);
    
        $('body').on('click', '.inline-collapsed', function(e){
            e.preventDefault();
            $(this).hide();
            $(this).prev('.read-more-paragraph').css({"height":"auto"});
            $(this).next('.inline-expanded').show();
            $(this).prev('.read-more-paragraph').trigger("originalContent", function( content ) {
                $(this).empty().append(content);
            });
        });
    
        $('body').on('click', '.inline-expanded', function(e) {
            e.preventDefault();
            $(this).hide();
            $(this).prev('.inline-collapsed').show();
			$(this).prev('.inline-collapsed').prev('.read-more-paragraph').css({"height":$(this).prev('.inline-collapsed').prev('.read-more-paragraph').attr("data-height").toString()+"px", "overflow": "hidden"});
            $(this).prev('.inline-collapsed').prev('.read-more-paragraph').dotdotdot({
                ellipsis:'...',
                wrap: 'letter'
            });
        });

});
$(function($){
    $('.hotspot-highlight-image:not(.hotspot-highlight-image-edit-mode)').each(function(){
    	var $this = $(this);
        if(!$this.has('img').length){
        	$this.closest('.hs-tooltip-wrap').css({"width":"420px"});
        	$this.next('.hotspot-highlight-text').css({"margin-left":"0px"});
        	$this.closest('.highlight').css({"padding-bottom":"3px"});
        	$this.css({"display":"none"});
        }else{
        	$this.closest('.highlight').css({"padding-bottom":"10px"});
        }
    });
});

$(function(){
    $(".adobe-connect-webcast a").each(function(i, anchor){
        anchor.addEventListener('click',function(event){
            var guestbookCode = this.getAttribute('data-guestbookcode');
            var analyticsPayload = {
                eventName:'webcast'
            };

            if (guestbookCode){
                analyticsPayload['gbroot'] = 'GB_' + guestbookCode;
                var matcher = this.search.match(/du=(.*)/);
                analyticsPayload['eventLabel'] = decodeURIComponent(matcher[1]);
            }else{
                analyticsPayload['eventLabel'] = this.getAttribute('href');
            }

            NIAnalytics.captureMultimedia(analyticsPayload);
        });
    });
});
$(document).ready(function () {

    function initializeTooltips(){
		var id, initialized = false;

    	$('.popover-body').each(function () {
        	if (!initialized) {
            	initialized = true;
            	initializeNIATooltips();
        	}
        	id = $(this).attr('id');
        	$('#' + id + '-content').children(".section").first().remove();
        	$('#' + id + ' .tooltipcontent').html($('#' + id + '-content').removeAttr("style").clone());
        	$('#' + id + '-content').hide();
    	});

    	$('.ni-popover')
    		.filter(function() {
    			return $.trim($(this).html()) === '';
    		})
    		.html('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128" class="ni-tooltip-icon"><path d="M64,0a64,64,0,1,0,64,64A64,64,0,0,0,64,0ZM75.61,93.41q-4.36,1.69-7,2.57a18.73,18.73,0,0,1-6,.89c-3.52,0-6.26-.84-8.22-2.53a8.09,8.09,0,0,1-2.93-6.41,21,21,0,0,1,.22-3.09,34.68,34.68,0,0,1,.71-3.56L56,68.65q.5-1.82.83-3.44a15,15,0,0,0,.33-3,4.5,4.5,0,0,0-1-3.37c-.68-.63-2-.95-3.89-.95a10.31,10.31,0,0,0-2.9.43c-1,.29-1.83.56-2.54.82l1-3.89c2.39-.95,4.66-1.76,6.84-2.44a20.91,20.91,0,0,1,6.18-1c3.5,0,6.2.83,8.09,2.48a8.17,8.17,0,0,1,2.84,6.46c0,.55-.06,1.51-.19,2.89a19.92,19.92,0,0,1-.72,3.8L67.21,80.06c-.29,1-.55,2.16-.79,3.46a17.73,17.73,0,0,0-.36,2.94c0,1.67.38,2.81,1.15,3.41a6.52,6.52,0,0,0,4,.91,11.57,11.57,0,0,0,3-.45,16.72,16.72,0,0,0,2.42-.8ZM75,42.36a8.74,8.74,0,0,1-6.1,2.31,8.83,8.83,0,0,1-6.13-2.31,7.42,7.42,0,0,1,0-11.21,8.79,8.79,0,0,1,6.13-2.33A8.69,8.69,0,0,1,75,31.15a7.45,7.45,0,0,1,0,11.21Z"/></svg>');
    }

    initializeTooltips();


    $('#labviewOnlineDemo').click(function(e) {

	    e.preventDefault();
        var myNIUA = NIUA.getNIUA({apikey:"0d6a398d-7ff4-4f12-9086-7045b65bf2ca"});

		ISO_TO_ORACLE = function (locale) {
			// Common cases
			var map = {
				en: "us",
				fr: "f",
				de: "d",
				it: "i",
				es: "esa",
				ja: "ja",
				ko: "ko",
				pt: "pt",
				ru: "ru"
			};

			// Handle China
			if (locale === "zh-CN") {
				return "zhs";
			}

			// Handle Taiwan/Hong Kong
			if (locale === "zh-HK" || locale === "zh-TW") {
				return "zht";
			}

			// Strip down to language
			locale = locale.replace(/\-.*/, "");

			return map[locale] || "us";
		};  

      myNIUA.ready().then(function(){
          myNIUA.getDetails().then(function(data){
              var locale = $.cookie("locale");
              if (data.response.success){
                var phone= data.response.phone.countryCode + data.response.phone.areaCode + data.response.phone.phoneNumber;
                if(isNaN(phone)){
                    phone="";
                }
                var testParameter='false';
                if(typeof $('#labviewOnlineDemo').data("test") !== 'undefined'){
                    testParameter='true';
                }

               var url="/bin/ni/labviewdemo?email=" + data.response.email + "&firstName=" +  data.response.firstName + "&lastname=" + data.response.lastName + "&phone=" + phone + "&locale=" + locale + "&test=" +testParameter;

               $.ajax({
                    url: url,
                    type: 'POST',
                    success: function(data){
                        window.open(JSON.parse(data).message.StreamingURL);
                    },
                    error: function(data) {
                        window.open("/" + locale.toLowerCase() +"/error.html");
                    }
                });
              }else{
                  window.location="https://lumen.ni.com/nicif/"+ ISO_TO_ORACLE(locale)+"/EVALLVONLINE/content.xhtml?du=" + encodeURIComponent(location.href);
			  }
          })
	  });
    });
});